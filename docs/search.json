[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 allofus authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/allofus.html","id":"the-basics","dir":"Articles","previous_headings":"","what":"The Basics","title":"All of Us in R","text":"diving specifics, let’s clarify vocabulary: SQL database : structured collection data information stored tables. table like spreadsheet rows columns. Data can added, removed, modified using SQL queries. SQL query : request data database written language called SQL (Structured Query Language). Google BigQuery : cloud-based SQL database used store Us data. bigrquery : R package allows interact Google BigQuery R. dplyr: part tidyverse R, dplyr package data manipulation. provides set functions can used filter, select, arrange, mutate, summarize, join data. dbplyr : Also part tidyverse R, dbplyr database backend dplyr. allows write R code translated SQL queries.","code":""},{"path":[]},{"path":"/articles/allofus.html","id":"connecting-to-the-database","dir":"Articles","previous_headings":"Accessing Data","what":"Connecting to the database","title":"All of Us in R","text":"connection database object allows interact R. allofus package relies bigrquery R package create connection Google BigQuery database run aou_connect(). object con used refer connection Us database. run aou_connect() function, also gets stored default connection session, don’t need include functions allofus package. instance, can run aou_tables() see list tables database:","code":"library(allofus) con <- aou_connect() aou_tables() #> # A tibble: 68 × 2 #>    table_name               columns                                              #>    <chr>                    <chr>                                                #>  1 concept_ancestor         ancestor_concept_id, descendant_concept_id, min_lev… #>  2 cb_criteria_ancestor     ancestor_id, descendant_id                           #>  3 attribute_definition     attribute_definition_id, attribute_name, attribute_… #>  4 cdm_source               cdm_source_name, cdm_source_abbreviation, cdm_holde… #>  5 concept_class            concept_class_id, concept_class_name, concept_class… #>  6 concept                  concept_id, concept_name, domain_id, vocabulary_id,… #>  7 concept_synonym          concept_id, concept_synonym_name, language_concept_… #>  8 cb_criteria_relationship concept_id_1, concept_id_2                           #>  9 concept_relationship     concept_id_1, concept_id_2, relationship_id, valid_… #> 10 condition_occurrence     condition_occurrence_id, person_id, condition_conce… #> # ℹ 58 more rows"},{"path":"/articles/allofus.html","id":"accessing-a-table","dir":"Articles","previous_headings":"Accessing Data","what":"Accessing a table","title":"All of Us in R","text":"access table database, use tbl(con, \"tablename\"). resulting object reference table database allows interact R. order connect table database, must first create database connection (con). example, create reference person table: Although person_tbl object behaves similarly data frame, actually data frame. Instead, actually SQL query gets run need access data. feature dbplyr package allows manipulate data without actually retrieving . SQL query behind person_tbl object : print person_tbl, ’ll get something like : ’ll see first 10 rows person table (person ids omitted output). allows see data looks like without loading entire table R, can slow even crash session. Instead, want perform much data manipulation possible database. efficient operations translated SQL executed server, faster requires less memory processing R.","code":"person_tbl <- tbl(con, \"person\") SELECT * FROM `person` person_tbl #> # Source:   table<person> [?? x 23] #> # Database: BigQueryConnection #>    person_id gender_concept_id year_of_birth month_of_birth day_of_birth #>      <int64>           <int64>       <int64>        <int64>      <int64> #>  1   xxxxxxx            903096          1955             NA           NA #>  2   xxxxxxx            903096          1978             NA           NA #>  3   xxxxxxx            903096          2000             NA           NA #>  4   xxxxxxx            903096          1988             NA           NA #>  5   xxxxxxx            903096          1993             NA           NA #>  6   xxxxxxx            903096          1959             NA           NA #>  7   xxxxxxx            903096          1976             NA           NA #>  8   xxxxxxx            903096          1961             NA           NA #>  9   xxxxxxx            903096          1952             NA           NA #> 10   xxxxxxx            903096          1980             NA           NA #> # ℹ more rows #> # ℹ 18 more variables: birth_datetime <dttm>, race_concept_id <int64>, #> #   ethnicity_concept_id <int64>, location_id <int64>, provider_id <int64>, #> #   care_site_id <int64>, person_source_value <chr>, gender_source_value <chr>, #> #   gender_source_concept_id <int64>, race_source_value <chr>, #> #   race_source_concept_id <int64>, ethnicity_source_value <chr>, #> #   ethnicity_source_concept_id <int64>, …"},{"path":"/articles/allofus.html","id":"data-manipulation-on-the-database","dir":"Articles","previous_headings":"","what":"Data manipulation on the database","title":"All of Us in R","text":"bringing data R, can manipulate database using dplyr functions. allows perform operations database without bringing data R’s memory. example, can subset person table women born 1980: print young_women, SQL query actually run. fact, person_tbl run either. print , run following SQL: print first 10 rows: Note don’t know many observations match conditions yet (dimensions [?? x 23]), hasn’t fully executed – first 10 rows. get total number observations, can use tally(): actually SQL query results 1 row, get see entire thing. ’s much faster run bring entire table R count number rows, code executed database:","code":"young_women <- person_tbl %>%   filter(gender_concept_id == 45878463, year_of_birth > 1980) SELECT `person`.* FROM `person` WHERE (`gender_concept_id` = 45878463.0) AND (`year_of_birth` > 1980.0) young_women #> # Source:   SQL [?? x 23] #> # Database: BigQueryConnection #>    person_id gender_concept_id year_of_birth month_of_birth day_of_birth #>      <int64>           <int64>       <int64>        <int64>      <int64> #>  1   xxxxxxx          45878463          1992             NA           NA #>  2   xxxxxxx          45878463          1989             NA           NA #>  3   xxxxxxx          45878463          1981             NA           NA #>  4   xxxxxxx          45878463          1990             NA           NA #>  5   xxxxxxx          45878463          1990             NA           NA #>  6   xxxxxxx          45878463          1985             NA           NA #>  7   xxxxxxx          45878463          1987             NA           NA #>  8   xxxxxxx          45878463          1986             NA           NA #>  9   xxxxxxx          45878463          1983             NA           NA #> 10   xxxxxxx          45878463          1998             NA           NA # ℹ more rows # ℹ 18 more variables: birth_datetime <dttm>, race_concept_id <int64>, #   ethnicity_concept_id <int64>, location_id <int64>, provider_id <int64>, #   care_site_id <int64>, person_source_value <chr>, gender_source_value <chr>, #   gender_source_concept_id <int64>, race_source_value <chr>, #   race_source_concept_id <int64>, ethnicity_source_value <chr>, #   ethnicity_source_concept_id <int64>, … tally(young_women) #> # Source:   SQL [1 x 1] #> # Database: BigQueryConnection #>         n #>   <int64> #> 1   76135 SELECT count(*) AS `n` FROM (   SELECT `person`.*   FROM `person`   WHERE (`gender_concept_id` = 45878463.0) AND (`year_of_birth` > 1980.0) )"},{"path":"/articles/allofus.html","id":"the-collect-function","dir":"Articles","previous_headings":"Data manipulation on the database","what":"The collect() Function","title":"All of Us in R","text":"can bring result query local R session using collect(): brings table local R workspace tibble, dataframe. useful performing operations performed directly database, certain statistical analyses plotting. example, ’re planning run regression analysis filtered data, first use collect() bring data R. can bring result tally() well: even entire person table, although ’s recommended ’s large!","code":"young_women %>% collect() tally(young_women) %>% collect() #> A tibble: 1 × 1 #>       n #> <int64> #>   76135 person_data <- person_tbl %>% collect() person_data #> # A tibble: 413457 × 23 #> person_id    gender_concept_id   year_of_birth   month_of_birth  day_of_birth     #>   <int64>              <int64>         <int64>          <int64>       <int64> #>   xxxxxxx               903096            1955               NA            NA     #>   xxxxxxx               903096            1978               NA            NA #>   xxxxxxx               903096            2000               NA            NA #>   xxxxxxx               903096            1988               NA            NA #>   xxxxxxx               903096            1993               NA            NA #>   xxxxxxx               903096            1959               NA            NA #>   xxxxxxx               903096            1976               NA            NA #>   xxxxxxx               903096            1961               NA            NA #>   xxxxxxx               903096            1952               NA            NA #>   xxxxxxx               903096            1980               NA            NA"},{"path":"/articles/allofus.html","id":"data-manipulation-with-multiple-tables","dir":"Articles","previous_headings":"","what":"Data manipulation with multiple tables","title":"All of Us in R","text":"Us data spread across multiple tables, part corresponding OMOP Common Data Model. allows efficient storage retrieval data, can bit tricky work first. Fortunately, dbplyr makes easy join tables together. example, know gender_concept_id == 45878463 referred women? can look names concept ids concept table: just want extract names gender concept ids. , can join person table concept table. can see full range gender ids, first count : result SQL query just 9 rows, get see . counting joining done directly database, efficient.","code":"concept_tbl <- tbl(con, \"concept\") %>%   select(concept_id, concept_name) concept_tbl #> # Source:   SQL [?? x 2] #> # Database: BigQueryConnection #>    concept_id concept_name                                       #>       <int64> <chr>                                              #>  1   38003166 Durable Medical Equipment - General Classification #>  2   35805830 DexaBEAM                                           #>  3   38003221 Blood - Plasma                                     #>  4    1147839 survey_conduct.survey_start_date                   #>  5       8623 log reduction                                      #>  6   38004063 Rehabilitation Practitioner                        #>  7   38003186 Radiology - Diagnostic - General Classification    #>  8   35805115 VNCOP-B                                            #>  9   35805457 VAdCA                                              #> 10       8581 heartbeat                                          #> # ℹ more rows genders_in_aou <- person_tbl %>%   count(gender_concept_id) %>%   left_join(concept_tbl, by = join_by(gender_concept_id == concept_id)) genders_in_aou #> # Source:   SQL [9 x 3] #> # Database: BigQueryConnection #>   gender_concept_id       n concept_name                                         #>             <int64> <int64> <chr>                                                #> 1           1177221     602 I prefer not to answer                               #> 2                 0      97 No matching concept                                  #> 3          45878463  247453 Female                                               #> 4           1585843     407 Gender Identity: Additional Options                  #> 5            903096    7356 PMI: Skip                                            #> 6          45880669  154241 Male                                                 #> 7           1585842     562 Gender Identity: Transgender                         #> 8           1585841    1213 Gender Identity: Non Binary                          #> 9        2000000002    1526 Not man only, not woman only, prefer not to answer,…"},{"path":"/articles/allofus.html","id":"aou_join","dir":"Articles","previous_headings":"Data manipulation with multiple tables","what":"aou_join()","title":"All of Us in R","text":"allofus package includes function called aou_join() makes easy join tables together. includes additional checks help avoid mistakes joining. example, wanted join person table observation table, dropping people observations, like : warning message tells us person observation tables share column names didn’t specify part join argument. tables column called provider_id. can see looking column names obs table default added suffix, “_x” “_y”: often mistake occurring working tables directly, aou_join() warns us . can avoid warning specifying columns want join removing columns don’t want join . example, remove provider_id column person table joining:","code":"obs <- person_tbl %>%   aou_join(\"observation\", type = \"inner\", by = \"person_id\") Warning message: “There are shared column names not specified in the `by` argument. → These column names now end in '_x' and '_y'. ℹ You can change these suffixes using the `suffix` argument but it cannot   contain periods (`.`). → Consider specifing all shared columns in the `by` argument. → Or if these additional shared columns are `NA`, remove them prior to joining.” obs %>%   select(ends_with(\"_x\"), ends_with(\"_y\")) %>%   colnames() #> [1] \"provider_id_x\" \"provider_id_y\" obs <- person_tbl %>%   select(-provider_id) %>%   aou_join(\"observation\", type = \"inner\", by = \"person_id\")"},{"path":"/articles/allofus.html","id":"joins-from-different-sources","dir":"Articles","previous_headings":"","what":"Joins from different sources?","title":"All of Us in R","text":"Unfortunately, can’t join table database dataframe R. end one , couple options: See can avoid collecting dataframe R. allofus functions collect = FALSE argument, sometimes ’s unavoidable. Bring table database R using collect() join dataframe R. can inefficient part reason joining subset table data care . First subset table database, bring R join dataframe R. example, cohort participants dataframe, e.g., created aou_atlas_cohort(), want bring activity data participants, run:","code":"# instead of aou_join(cohort, \"activity_summary\", type = \"left\", by = \"person_id\") activity_data <- tbl(con, \"activity_summary\") %>%   filter(person_id %in% !!cohort$person_id) %>%   collect() %>%   right_join(cohort, by = \"person_id\")"},{"path":"/articles/allofus.html","id":"viewing-the-underlying-sql-with-show_query","dir":"Articles","previous_headings":"","what":"Viewing the Underlying SQL with show_query()","title":"All of Us in R","text":"Understanding SQL code dbplyr generates can insightful, especially ’re debugging simply curious translation R SQL. view SQL query corresponds dbplyr operations, use show_query() function: function prints SQL query sent database. ’s great way learn SQL understand dbplyr optimizes data manipulation. (gibberish table names? Bugs previous versions dbplyr resulted table names break query, giving unique names workaround.)","code":"obs %>%   show_query() SELECT   `edjnngldox`.`person_id` AS `person_id`,   `gender_concept_id`,   `year_of_birth`,   `month_of_birth`,   `day_of_birth`,   `birth_datetime`,   `race_concept_id`,   `ethnicity_concept_id`,   `location_id`,   `care_site_id`,   `person_source_value`,   `gender_source_value`,   `gender_source_concept_id`,   `race_source_value`,   `race_source_concept_id`,   `ethnicity_source_value`,   `ethnicity_source_concept_id`,   `state_of_residence_concept_id`,   `state_of_residence_source_value`,   `sex_at_birth_concept_id`,   `sex_at_birth_source_concept_id`,   `sex_at_birth_source_value`,   `observation_id`,   `observation_concept_id`,   `observation_date`,   `observation_datetime`,   `observation_type_concept_id`,   `value_as_number`,   `value_as_string`,   `value_as_concept_id`,   `qualifier_concept_id`,   `unit_concept_id`,   `zwcwezaowf`.`provider_id` AS `provider_id`,   `visit_occurrence_id`,   `visit_detail_id`,   `observation_source_value`,   `observation_source_concept_id`,   `unit_source_value`,   `qualifier_source_value`,   `value_source_concept_id`,   `value_source_value`,   `questionnaire_response_id` FROM `person` `edjnngldox` INNER JOIN `observation` `zwcwezaowf`   ON (`edjnngldox`.`person_id` = `zwcwezaowf`.`person_id`)"},{"path":"/articles/allofus.html","id":"running-sql-code-directly","dir":"Articles","previous_headings":"","what":"Running SQL code directly","title":"All of Us in R","text":"Another approach working data write SQL code directly. especially useful complex queries difficult express dplyr syntax. allofus package includes function called aou_sql() makes easy run SQL code directly database. example, count number people person table like : important things note code. First, CDR variable special variable referring Us calls “curated data repository”. writing SQL code directly, don’t need database connection object con, instead need direct code correct tables preceding table names “{CDR}”. means can’t run code get show_query() without modification. example, count number young women dataset, dbplyr approach, like : Second, aou_sql() function returns dataframe – entire result SQL query brought memory. means want run entire query , instead breaking multiple steps like dbplyr.","code":"aou_sql(\"SELECT COUNT(*) AS n FROM {CDR}.person\") aou_sql(\" SELECT count(*) AS `n` FROM (   SELECT `person`.*   FROM {CDR}.`person`   WHERE (`gender_concept_id` = 45878463.0) AND (`year_of_birth` > 1980.0) ) \")"},{"path":"/articles/data.html","id":"survey-data","dir":"Articles","previous_headings":"","what":"Survey data","title":"Extracting All of Us survey and EHR data","text":"first step extracting gender country birth survey data. can retrieve variables either concept code concept id. Using allofus searchable codebook, find concept id gender 1585838 birthplace 1586135. can use aou_survey function extract variables Us database. function takes vector concept ids codes, returns dataset one row per participant one column per variable. question_output argument allows specify names column output dataset. Alternatively, can specify “concept_id” “concept_code” name variables according one options. Note aou_survey function takes cohort argument, requirement contains column called person_id. cohort provided (e.g., using survey data define cohort), function pull data entire Us cohort. aou_survey() defaults collect = FALSE, query isn’t fully executed yet, can continue perform analyses, like cross-tabulating two variables, database. create cohort, can subset data participants matching criteria. Note aou_survey() function automatically creates additional column every survey variable extracted, contains date participant answered question. automatically named adding “_date” suffix column names.","code":"library(allofus) library(tidyverse)  svy_vars <- aou_survey(questions = c(1585838, 1586135), question_output = c(\"gender\", \"birthplace\")) #> Warning: No cohort provided. #> → Pulling survey data for entire All of Us cohort. count(svy_vars, gender, birthplace) #> # Source:   SQL [?? x 3] #> # Database: BigQueryConnection #>    gender            birthplace       n #>    <chr>             <chr>      <int64> #>  1 Skip              Skip          4449 #>  2 NA                NA              97 #>  3 Woman             USA         205440 #>  4 Woman             Other        40348 #>  5 Man               Skip          1484 #>  6 Transgender       USA            504 #>  7 PreferNotToAnswer USA            475 #>  8 PreferNotToAnswer Other          112 #>  9 Man               USA         131698 #> 10 Man               Other        21059 #> # ℹ more rows cohort <- svy_vars %>%   filter(gender == \"Woman\", birthplace == \"Other\")  cohort #> # Source:   SQL [?? x 5] #> # Database: BigQueryConnection #>    person_id birthplace gender birthplace_date gender_date #>      <int64> <chr>      <chr>  <date>          <date>      #>  1   xxxxxxx Other      Woman  2019-08-xx      2019-08-xx  #>  2   xxxxxxx Other      Woman  2018-06-xx      2018-06-xx  #>  3   xxxxxxx Other      Woman  2019-05-xx      2019-05-xx  #>  4   xxxxxxx Other      Woman  2019-02-xx      2019-02-xx  #>  5   xxxxxxx Other      Woman  2018-06-xx      2018-06-xx  #>  6   xxxxxxx Other      Woman  2019-03-xx      2019-03-xx  #>  7   xxxxxxx Other      Woman  2019-04-xx      2019-04-xx  #>  8   xxxxxxx Other      Woman  2019-04-xx      2019-04-xx  #>  9   xxxxxxx Other      Woman  2019-05-xx      2019-05-xx  #> 10   xxxxxxx Other      Woman  2020-09-xx      2020-09-xx  #> # ℹ more rows"},{"path":"/articles/data.html","id":"ehr-data","dir":"Articles","previous_headings":"","what":"EHR data","title":"Extracting All of Us survey and EHR data","text":"Now cohort, want create dataset data participants’ medical records. first want find concept ids data want extract. number tools use : Athena: web-based tool searching entire OMOP vocabulary. concept id Type 2 diabetes mellitus can found ID. many results search, want standard concepts searching EHR data.  Data Browser: tool exploring data Us database. Finding concept id Type 2 diabetes mellitus requires searching concept clicking “Sources”:  Researcher Workbench: Creating concept set can allow find number concept ids quickly. Add concepts concept set, review concept set see .  concepts may want include. Keep mind example, real analysis thorough search relevant concepts. First, ’ll extract data diabetes diagnoses. can use aou_concept_set function extract data Us database. function takes cohort, vector concepts, domain set domains. can actually extract data multiple domains – default search domains. However, helpful specify domain(s) can, speed clarity. output = argument specifies type data extract. , ’ll extract indicator variable whether participant diabetes diagnosis point medical record. ’ll call variable “t2dm”. can also extract data within certain time window. example, want extract metformin use joining Us, can specify start date date participant answered gender question (Basics survey). ’ll count many times participant prescribed metformin time point. concept set measurement domain, likely want set output = \"\" interested values measurements, whether many . output dataset one row per measurement. can see second participant output 4 A1C measurements since joining Us, fifth 1 rest none.","code":"t2dm <- aou_concept_set(cohort,   concepts = c(201826, 4193704),   domains = \"condition\", output = \"indicator\",   concept_set_name = \"t2dm\" ) metformin <- aou_concept_set(cohort,   concepts = c(40164929, 40164897),   domains = \"drug\", output = \"count\",   start_date = \"gender_date\", concept_set_name = \"metformin\" ) a1c <- aou_concept_set(cohort,   concepts = c(3004410, 3005673),   domains = \"measurement\", output = \"all\", start_date = \"gender_date\" ) a1c #> # Source:   SQL [?? x 9] #> # Database: BigQueryConnection #>    person_id concept_date concept_id concept_name concept_domain value_as_number #>      <int64> <date>          <int64> <chr>        <chr>                    <dbl> #>  1   xxxxxx1 NA                   NA NA           NA                        NA   #>  2   xxxxxx2 2022-03-xx      3004410 Hemoglobin … Measurement                5.6 #>  3   xxxxxx2 2021-07-xx      3004410 Hemoglobin … Measurement                5.6 #>  4   xxxxxx2 2021-05-xx      3004410 Hemoglobin … Measurement                5.5 #>  5   xxxxxx2 2020-10-xx      3004410 Hemoglobin … Measurement                6   #>  6   xxxxxx3 NA                   NA NA           NA                        NA   #>  7   xxxxxx4 NA                   NA NA           NA                        NA   #>  8   xxxxxx5 2019-04-xx      3005673 Hemoglobin … Measurement                5.9 #>  9   xxxxxx6 NA                   NA NA           NA                        NA   #> 10   xxxxxx7 NA                   NA NA           NA                        NA   #> # ℹ more rows #> # ℹ 3 more variables: value_as_concept_id <int64>, value_source_value <chr>, #> #   gender_date <date>"},{"path":"/articles/data.html","id":"health-history-survey-data","dir":"Articles","previous_headings":"","what":"Health history survey data","title":"Extracting All of Us survey and EHR data","text":"Suppose want compare EHR data self-reported survey data diabetes diagnoses. Returning aou_survey() function, need first find concept id question asking diabetes diagnoses. Wuestions health history surveys complex others like gender birthplace: branching questions complex skip patterns question, also asked family members, groups diagnoses asked together. searchable health history codebook useful tool finding concept id questions. can search “diabetes” find concept id question asking type 2 diabetes diagnoses respondent: 43529932. can also use Data Browser find concept id: Data health history surveys returned “Yes”, “”, “Skip”. observation value “” participant answered someone family condition, self-identify condition, responded one family condition. skipped either part question, value “Skip”. Next, want combine datasets one. can using aou_join function. function takes list datasets joins together using participant id. aou_join function also allows specify type join (inner, left, right, full). ’ll perform repeated left joins cohort using reduce() function purrr package. combined dataset columns diabetes diagnosis indicator EHR data, number metformin prescriptions, self-reported diabetes diagnosis health history survey date survey completed, well complete data A1C measurements. Participants multiple measurements therefore multiple rows dataset. may want additional analyses bringing table database R. example, may want summarize A1C measurements highest value participant. can continue manipulate data using dplyr functions (see vignette(\"sql\", package = \"allofus\")). final query may take seconds run – accumulation queries ’ve run far (use show_query() see SQL query run). reason, often helpful print result individual query make sure expect moving next step.","code":"t2dm_self <- aou_survey(cohort, questions = 43529932, question_output = \"t2dm_survey\") combined_data <- reduce(list(cohort, t2dm, metformin, a1c, t2dm_self),   aou_join,   type = \"left\" ) final_data <- combined_data %>%   group_by(person_id, birthplace, t2dm, metformin, t2dm_survey) %>%   summarize(max_a1c = max(value_as_number, na.rm = TRUE), .groups = \"drop\") final_data #> # Source:   SQL [?? x 5] #> # Database: BigQueryConnection #>    person_id  t2dm metformin t2dm_survey max_a1c #>      <int64> <dbl>     <dbl> <chr>         <dbl> #>  1   xxxxxxx     0         0 NA             NA   #>  2   xxxxxxx     0         0 DontKnow       NA   #>  3   xxxxxxx     0         0 NA             NA   #>  4   xxxxxxx     0         0 No             NA   #>  5   xxxxxxx     0         0 NA             NA   #>  6   xxxxxxx     0         0 NA             NA   #>  7   xxxxxxx     0         0 NA             NA   #>  8   xxxxxxx     0         0 No             NA   #>  9   xxxxxxx     0         0 NA             NA   #> 10   xxxxxxx     0         0 No              5.4 #> # ℹ more rows"},{"path":"/articles/pkgdown_only/data-browser.html","id":"using-the-allofus-data-browser-and-r-together","dir":"Articles > Pkgdown_only","previous_headings":"","what":"Using the AllofUs data browser and R together","title":"Using the Data Browser and AllofUs Database","text":"vignette go use AllofUs Research Data Browser identify questions interest, pull data OMOP-CDM structured database. Data Browser useful took quickly finding data (survey questions, conditions electronic health record, fitbit measurements etc.). can found : https://databrowser.researchallofus.org/ available publicly. However, ’s always clear exactly query OMOP-CDM database find data can preview Data Browser. Later Edit: Nearly key information need find survey data can found : https://support.researchallofus.org/hc/en-us/articles/6085114880148.","code":""},{"path":[]},{"path":"/articles/pkgdown_only/data-browser.html","id":"the-basics","dir":"Articles > Pkgdown_only","previous_headings":"Using the AllofUs data browser and R together > Survey Data","what":"The Basics","title":"Using the Data Browser and AllofUs Database","text":"Finding question “country born?” participants answers  can see image “Concept Code” Birthplace USA 1586136. Non-Standard AllofUs specific code used identify Birthplace: USA. need find code question. easy way search code Athena (https://athena.ohdsi.org/search-terms/start).  Clicking Birthplace:USA reveals Observation Domain, question Answer, PPI Vocabulary (vocabulary AllofUs specific, non-standard codes). also see PPI Parent Code 1586135 “Basics: Birthplace”. non-standard code question. can also see non-standard Standard map (OMOP) Birthlace code 3005917. Standard code “Birthplace”.  successful finding AllofUs Data Data Browswer, really important understand difference non-standard standard codes. non-standard codes specific AllofUs database. Standard codes codes found OMOP database. non-standard codes found **{table}_source_concept_id** columns. standard codes found **{table}_concept_id** columns Lets look survey question example. can find question, non-standard code 1586135 observation table. AllofUs specific code Basics: Birthplace question observation_source_concept_id column. ’s glimpse distinct responses code (note ’ve omitted important columns like person_id observation_date shown aggregate row comply AllofUs data sharing restrictions). columns match values saw Athena. can see standard concept ID Birthplace question observation_concept_id column. observation_source_value observation_source_concept_id columns hold related non-standard codes question. Finally, see survey responses : non-standard concept code saw data browser value_source_concept_id column text version code value_source_value.","code":"# start by loading R packages library(allofus)  # You can also use library(tidyverse) to load all of these at once library(dplyr) library(tidyr) library(tibble)  con <- allofus::aou_connect() dplyr::tbl(con, \"observation\") %>%     dplyr::filter(observation_source_concept_id == 1586135) %>%     head() %>%      dplyr::distinct(observation_concept_id, observation_source_value,            observation_source_concept_id, value_source_concept_id, value_source_value) %>%     dplyr::collect()"},{"path":"/articles/sql.html","id":"the-basics","dir":"Articles","previous_headings":"","what":"The Basics","title":"SQL in R","text":"diving specifics, let’s clarify vocabulary: SQL database : structured collection data information stored tables. table like spreadsheet rows columns. Data can added, removed, modified using SQL queries. SQL query : request data database written language called SQL (Structured Query Language). Google BigQuery : cloud-based SQL database used store Us data. bigrquery : R package allows interact Google BigQuery R. dplyr: part tidyverse R, dplyr package data manipulation. provides set functions can used filter, select, arrange, mutate, summarize, join data. dbplyr : Also part tidyverse R, dbplyr database backend dplyr. allows write R code translated SQL queries.","code":""},{"path":[]},{"path":"/articles/sql.html","id":"connecting-to-the-database","dir":"Articles","previous_headings":"Accessing Data","what":"Connecting to the database","title":"SQL in R","text":"connection database object allows interact R. allofus package relies bigrquery R package create connection Google BigQuery database run aou_connect(). object con used refer connection Us database. run aou_connect() function, also gets stored default connection session, don’t need include functions allofus package. instance, can run aou_tables() see list tables database:","code":"library(allofus) con <- aou_connect() aou_tables() #> # A tibble: 68 × 2 #>    table_name               columns                                              #>    <chr>                    <chr>                                                #>  1 concept_ancestor         ancestor_concept_id, descendant_concept_id, min_lev… #>  2 cb_criteria_ancestor     ancestor_id, descendant_id                           #>  3 attribute_definition     attribute_definition_id, attribute_name, attribute_… #>  4 cdm_source               cdm_source_name, cdm_source_abbreviation, cdm_holde… #>  5 concept_class            concept_class_id, concept_class_name, concept_class… #>  6 concept                  concept_id, concept_name, domain_id, vocabulary_id,… #>  7 concept_synonym          concept_id, concept_synonym_name, language_concept_… #>  8 cb_criteria_relationship concept_id_1, concept_id_2                           #>  9 concept_relationship     concept_id_1, concept_id_2, relationship_id, valid_… #> 10 condition_occurrence     condition_occurrence_id, person_id, condition_conce… #> # ℹ 58 more rows"},{"path":"/articles/sql.html","id":"accessing-a-table","dir":"Articles","previous_headings":"Accessing Data","what":"Accessing a table","title":"SQL in R","text":"access table database, use tbl(con, \"tablename\"). resulting object reference table database allows interact R. order connect table database, must first create database connection (con). example, create reference person table: Although person_tbl object behaves similarly data frame, actually data frame. Instead, actually SQL query gets run need access data. feature dbplyr package allows manipulate data without actually retrieving . SQL query behind person_tbl object : print person_tbl, ’ll get something like : ’ll see first 10 rows person table (person ids omitted output). allows see data looks like without loading entire table R, can slow even crash session. Instead, want perform much data manipulation possible database. efficient operations translated SQL executed server, faster requires less memory processing R.","code":"person_tbl <- tbl(con, \"person\") SELECT * FROM `person` person_tbl #> # Source:   table<person> [?? x 23] #> # Database: BigQueryConnection #>    person_id gender_concept_id year_of_birth month_of_birth day_of_birth #>      <int64>           <int64>       <int64>        <int64>      <int64> #>  1   xxxxxxx            903096          1955             NA           NA #>  2   xxxxxxx            903096          1978             NA           NA #>  3   xxxxxxx            903096          2000             NA           NA #>  4   xxxxxxx            903096          1988             NA           NA #>  5   xxxxxxx            903096          1993             NA           NA #>  6   xxxxxxx            903096          1959             NA           NA #>  7   xxxxxxx            903096          1976             NA           NA #>  8   xxxxxxx            903096          1961             NA           NA #>  9   xxxxxxx            903096          1952             NA           NA #> 10   xxxxxxx            903096          1980             NA           NA #> # ℹ more rows #> # ℹ 18 more variables: birth_datetime <dttm>, race_concept_id <int64>, #> #   ethnicity_concept_id <int64>, location_id <int64>, provider_id <int64>, #> #   care_site_id <int64>, person_source_value <chr>, gender_source_value <chr>, #> #   gender_source_concept_id <int64>, race_source_value <chr>, #> #   race_source_concept_id <int64>, ethnicity_source_value <chr>, #> #   ethnicity_source_concept_id <int64>, …"},{"path":"/articles/sql.html","id":"data-manipulation-on-the-database","dir":"Articles","previous_headings":"","what":"Data manipulation on the database","title":"SQL in R","text":"bringing data R, can manipulate database using dplyr functions. allows perform operations database without bringing data R’s memory. example, can subset person table women born 1980: print young_women, SQL query actually run. fact, person_tbl run either. print , run following SQL: print first 10 rows: Note don’t know many observations match conditions yet (dimensions [?? x 23]), hasn’t fully executed – first 10 rows. get total number observations, can use tally(): actually SQL query results 1 row, get see entire thing. ’s much faster run bring entire table R count number rows, code executed database:","code":"young_women <- person_tbl %>%   filter(gender_concept_id == 45878463, year_of_birth > 1980) SELECT `person`.* FROM `person` WHERE (`gender_concept_id` = 45878463.0) AND (`year_of_birth` > 1980.0) young_women #> # Source:   SQL [?? x 23] #> # Database: BigQueryConnection #>    person_id gender_concept_id year_of_birth month_of_birth day_of_birth #>      <int64>           <int64>       <int64>        <int64>      <int64> #>  1   xxxxxxx          45878463          1992             NA           NA #>  2   xxxxxxx          45878463          1989             NA           NA #>  3   xxxxxxx          45878463          1981             NA           NA #>  4   xxxxxxx          45878463          1990             NA           NA #>  5   xxxxxxx          45878463          1990             NA           NA #>  6   xxxxxxx          45878463          1985             NA           NA #>  7   xxxxxxx          45878463          1987             NA           NA #>  8   xxxxxxx          45878463          1986             NA           NA #>  9   xxxxxxx          45878463          1983             NA           NA #> 10   xxxxxxx          45878463          1998             NA           NA # ℹ more rows # ℹ 18 more variables: birth_datetime <dttm>, race_concept_id <int64>, #   ethnicity_concept_id <int64>, location_id <int64>, provider_id <int64>, #   care_site_id <int64>, person_source_value <chr>, gender_source_value <chr>, #   gender_source_concept_id <int64>, race_source_value <chr>, #   race_source_concept_id <int64>, ethnicity_source_value <chr>, #   ethnicity_source_concept_id <int64>, … tally(young_women) #> # Source:   SQL [1 x 1] #> # Database: BigQueryConnection #>         n #>   <int64> #> 1   76135 SELECT count(*) AS `n` FROM (   SELECT `person`.*   FROM `person`   WHERE (`gender_concept_id` = 45878463.0) AND (`year_of_birth` > 1980.0) )"},{"path":"/articles/sql.html","id":"the-collect-function","dir":"Articles","previous_headings":"Data manipulation on the database","what":"The collect() Function","title":"SQL in R","text":"can bring result query local R session using collect(): brings table local R workspace tibble, dataframe. useful performing operations performed directly database, certain statistical analyses plotting. example, ’re planning run regression analysis filtered data, first use collect() bring data R. can bring result tally() well: even entire person table, although ’s recommended ’s large!","code":"young_women %>% collect() tally(young_women) %>% collect() #> A tibble: 1 × 1 #>       n #> <int64> #>   76135 person_data <- person_tbl %>% collect() person_data #> # A tibble: 413457 × 23 #> person_id    gender_concept_id   year_of_birth   month_of_birth  day_of_birth     #>   <int64>              <int64>         <int64>          <int64>       <int64> #>   xxxxxxx               903096            1955               NA            NA     #>   xxxxxxx               903096            1978               NA            NA #>   xxxxxxx               903096            2000               NA            NA #>   xxxxxxx               903096            1988               NA            NA #>   xxxxxxx               903096            1993               NA            NA #>   xxxxxxx               903096            1959               NA            NA #>   xxxxxxx               903096            1976               NA            NA #>   xxxxxxx               903096            1961               NA            NA #>   xxxxxxx               903096            1952               NA            NA #>   xxxxxxx               903096            1980               NA            NA"},{"path":"/articles/sql.html","id":"data-manipulation-with-multiple-tables","dir":"Articles","previous_headings":"","what":"Data manipulation with multiple tables","title":"SQL in R","text":"Us data spread across multiple tables, part corresponding OMOP Common Data Model. allows efficient storage retrieval data, can bit tricky work first. Fortunately, dbplyr makes easy join tables together. example, know gender_concept_id == 45878463 referred women? can look names concept ids concept table: just want extract names gender concept ids. , can join person table concept table. can see full range gender ids, first count : result SQL query just 9 rows, get see . counting joining done directly database, efficient.","code":"concept_tbl <- tbl(con, \"concept\") %>%   select(concept_id, concept_name) concept_tbl #> # Source:   SQL [?? x 2] #> # Database: BigQueryConnection #>    concept_id concept_name                                       #>       <int64> <chr>                                              #>  1   38003166 Durable Medical Equipment - General Classification #>  2   35805830 DexaBEAM                                           #>  3   38003221 Blood - Plasma                                     #>  4    1147839 survey_conduct.survey_start_date                   #>  5       8623 log reduction                                      #>  6   38004063 Rehabilitation Practitioner                        #>  7   38003186 Radiology - Diagnostic - General Classification    #>  8   35805115 VNCOP-B                                            #>  9   35805457 VAdCA                                              #> 10       8581 heartbeat                                          #> # ℹ more rows genders_in_aou <- person_tbl %>%   count(gender_concept_id) %>%   left_join(concept_tbl, by = join_by(gender_concept_id == concept_id)) genders_in_aou #> # Source:   SQL [9 x 3] #> # Database: BigQueryConnection #>   gender_concept_id       n concept_name                                         #>             <int64> <int64> <chr>                                                #> 1           1177221     602 I prefer not to answer                               #> 2                 0      97 No matching concept                                  #> 3          45878463  247453 Female                                               #> 4           1585843     407 Gender Identity: Additional Options                  #> 5            903096    7356 PMI: Skip                                            #> 6          45880669  154241 Male                                                 #> 7           1585842     562 Gender Identity: Transgender                         #> 8           1585841    1213 Gender Identity: Non Binary                          #> 9        2000000002    1526 Not man only, not woman only, prefer not to answer,…"},{"path":"/articles/sql.html","id":"aou_join","dir":"Articles","previous_headings":"Data manipulation with multiple tables","what":"aou_join()","title":"SQL in R","text":"allofus package includes function called aou_join() makes easy join tables together. includes additional checks help avoid mistakes joining. example, wanted join person table observation table, dropping people observations, like : warning message tells us person observation tables share column names didn’t specify part join argument. tables column called provider_id. can see looking column names obs table default added suffix, “_x” “_y”: often mistake occurring working tables directly, aou_join() warns us . can avoid warning specifying columns want join removing columns don’t want join . example, remove provider_id column person table joining:","code":"obs <- person_tbl %>%   aou_join(\"observation\", type = \"inner\", by = \"person_id\") Warning message: “There are shared column names not specified in the `by` argument. → These column names now end in '_x' and '_y'. ℹ You can change these suffixes using the `suffix` argument but it cannot   contain periods (`.`). → Consider specifing all shared columns in the `by` argument. → Or if these additional shared columns are `NA`, remove them prior to joining.” obs %>%   select(ends_with(\"_x\"), ends_with(\"_y\")) %>%   colnames() #> [1] \"provider_id_x\" \"provider_id_y\" obs <- person_tbl %>%   select(-provider_id) %>%   aou_join(\"observation\", type = \"inner\", by = \"person_id\")"},{"path":"/articles/sql.html","id":"viewing-the-underlying-sql-with-show_query","dir":"Articles","previous_headings":"","what":"Viewing the Underlying SQL with show_query()","title":"SQL in R","text":"Understanding SQL code dbplyr generates can insightful, especially ’re debugging simply curious translation R SQL. view SQL query corresponds dbplyr operations, use show_query() function: function prints SQL query sent database. ’s great way learn SQL understand dbplyr optimizes data manipulation. (gibberish table names? Bugs previous versions dbplyr resulted table names break query, giving unique names workaround.)","code":"obs %>%   show_query() SELECT   `edjnngldox`.`person_id` AS `person_id`,   `gender_concept_id`,   `year_of_birth`,   `month_of_birth`,   `day_of_birth`,   `birth_datetime`,   `race_concept_id`,   `ethnicity_concept_id`,   `location_id`,   `care_site_id`,   `person_source_value`,   `gender_source_value`,   `gender_source_concept_id`,   `race_source_value`,   `race_source_concept_id`,   `ethnicity_source_value`,   `ethnicity_source_concept_id`,   `state_of_residence_concept_id`,   `state_of_residence_source_value`,   `sex_at_birth_concept_id`,   `sex_at_birth_source_concept_id`,   `sex_at_birth_source_value`,   `observation_id`,   `observation_concept_id`,   `observation_date`,   `observation_datetime`,   `observation_type_concept_id`,   `value_as_number`,   `value_as_string`,   `value_as_concept_id`,   `qualifier_concept_id`,   `unit_concept_id`,   `zwcwezaowf`.`provider_id` AS `provider_id`,   `visit_occurrence_id`,   `visit_detail_id`,   `observation_source_value`,   `observation_source_concept_id`,   `unit_source_value`,   `qualifier_source_value`,   `value_source_concept_id`,   `value_source_value`,   `questionnaire_response_id` FROM `person` `edjnngldox` INNER JOIN `observation` `zwcwezaowf`   ON (`edjnngldox`.`person_id` = `zwcwezaowf`.`person_id`)"},{"path":"/articles/sql.html","id":"running-sql-code-directly","dir":"Articles","previous_headings":"","what":"Running SQL code directly","title":"SQL in R","text":"Another approach working data write SQL code directly. especially useful complex queries difficult express dplyr syntax. allofus package includes function called aou_sql() makes easy run SQL code directly database. example, count number people person table like : important things note code. First, CDR variable special variable referring Us calls “curated data repository”. writing SQL code directly, don’t need database connection object con, instead need direct code correct tables preceding table names “{CDR}”. means can’t run code get show_query() without modification. example, count number young women dataset, dbplyr approach, like : Second, aou_sql() function returns dataframe – entire result SQL query brought memory. means want run entire query , instead breaking multiple steps like dbplyr.","code":"aou_sql(\"SELECT COUNT(*) AS n FROM {CDR}.person\") aou_sql(\" SELECT count(*) AS `n` FROM (   SELECT `person`.*   FROM {CDR}.`person`   WHERE (`gender_concept_id` = 45878463.0) AND (`year_of_birth` > 1980.0) ) \")"},{"path":"/articles/web_only/data-browser.html","id":"using-the-allofus-data-browser-and-r-together","dir":"Articles > Web_only","previous_headings":"","what":"Using the AllofUs data browser and R together","title":"Using the Data Browser and AllofUs Database","text":"vignette go use AllofUs Research Data Browser identify questions interest, pull data OMOP-CDM structured database. Data Browser useful took quickly finding data (survey questions, conditions electronic health record, fitbit measurements etc.). can found : https://databrowser.researchallofus.org/ available publicly. However, ’s always clear exactly query OMOP-CDM database find data can preview Data Browser. Later Edit: Nearly key information need find survey data can found : https://support.researchallofus.org/hc/en-us/articles/6085114880148.","code":""},{"path":[]},{"path":"/articles/web_only/data-browser.html","id":"the-basics","dir":"Articles > Web_only","previous_headings":"Using the AllofUs data browser and R together > Survey Data","what":"The Basics","title":"Using the Data Browser and AllofUs Database","text":"Finding question “country born?” participants answers  can see image “Concept Code” Birthplace USA 1586136. Non-Standard AllofUs specific code used identify Birthplace: USA. need find code question. easy way search code Athena (https://athena.ohdsi.org/search-terms/start).  Clicking Birthplace:USA reveals Observation Domain, question Answer, PPI Vocabulary (vocabulary AllofUs specific, non-standard codes). also see PPI Parent Code 1586135 “Basics: Birthplace”. non-standard code question. can also see non-standard Standard map (OMOP) Birthlace code 3005917. Standard code “Birthplace”.  successful finding AllofUs Data Data Browswer, really important understand difference non-standard standard codes. non-standard codes specific AllofUs database. Standard codes codes found OMOP database. non-standard codes found **{table}_source_concept_id** columns. standard codes found **{table}_concept_id** columns Lets look survey question example. can find question, non-standard code 1586135 observation table. AllofUs specific code Basics: Birthplace question observation_source_concept_id column. ’s glimpse distinct responses code (note ’ve omitted important columns like person_id observation_date shown aggregate row comply AllofUs data sharing restrictions). columns match values saw Athena. can see standard concept ID Birthplace question observation_concept_id column. observation_source_value observation_source_concept_id columns hold related non-standard codes question. Finally, see survey responses : non-standard concept code saw data browser value_source_concept_id column text version code value_source_value.","code":"# start by loading R packages library(allofus)  # You can also use library(tidyverse) to load all of these at once library(dplyr) library(tidyr) library(tibble)  con <- allofus::aou_connect() dplyr::tbl(con, \"observation\") %>%     dplyr::filter(observation_source_concept_id == 1586135) %>%     head() %>%      dplyr::distinct(observation_concept_id, observation_source_value,            observation_source_concept_id, value_source_concept_id, value_source_value) %>%     dplyr::collect()"},{"path":[]},{"path":[]},{"path":"/articles/workspace.html","id":"in-your-workspace","dir":"Articles","previous_headings":"Listing Files","what":"In Your Workspace","title":"Managing files on the workbench","text":"Use aou_ls_workspace() list files workspace. function handy quickly checking files stored locally.","code":"aou_ls_workspace()"},{"path":"/articles/workspace.html","id":"in-your-bucket","dir":"Articles","previous_headings":"Listing Files","what":"In Your Bucket","title":"Managing files on the workbench","text":"Similarly, aou_ls_bucket() lists files bucket. function can used view files collaborators saved shared access. can also use pattern argument functions filter listed files based naming pattern.","code":"aou_ls_bucket() aou_ls_workspace(pattern = \"*.csv\") aou_ls_bucket(pattern = \"project_*.csv\")"},{"path":"/articles/workspace.html","id":"transferring-files","dir":"Articles","previous_headings":"","what":"Transferring Files","title":"Managing files on the workbench","text":"functions used conjunction R’s reading writing functions. can store type data workspace bucket.","code":""},{"path":"/articles/workspace.html","id":"from-workspace-to-bucket","dir":"Articles","previous_headings":"Transferring Files","what":"From Workspace to Bucket","title":"Managing files on the workbench","text":"’ve processed created file workspace, might want move bucket permanent storage share collaborators. Use aou_workspace_to_bucket() purpose.","code":"write.csv(data, \"file1.csv\") aou_workspace_to_bucket(\"file1.csv\")"},{"path":"/articles/workspace.html","id":"from-bucket-to-workspace","dir":"Articles","previous_headings":"Transferring Files","what":"From Bucket to Workspace","title":"Managing files on the workbench","text":"need use file collaborator saved bucket, want retrieve file deleting environment, use aou_bucket_to_workspace().","code":"aou_bucket_to_workspace(\"file2.csv\") data <- read.csv(\"file2.csv\")"},{"path":"/articles/workspace.html","id":"workflow-example","dir":"Articles","previous_headings":"","what":"Workflow Example","title":"Managing files on the workbench","text":"’s typical workflow using functions: List files workspace : Check files currently . Process create files : Perform data analysis work R. Save files workspace : Use R’s file handling functions like write.csv() write.rds(). Transfer bucket sharing permanent storage : Use aou_workspace_to_bucket(). Access shared files bucket : Use aou_bucket_to_workspace() bring files workspace needed.","code":""},{"path":"/articles/workspace.html","id":"important-considerations","dir":"Articles","previous_headings":"","what":"Important Considerations","title":"Managing files on the workbench","text":"Storage Hygiene : Regularly clean workspace avoid clutter manage storage costs. Backup Important Files : Use bucket backup important files. Files workspace (except notebooks) secure environment deletion.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Louisa Smith. Author, copyright holder. Rob Cavanaugh. Author, maintainer, copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Smith L, Cavanaugh R (2023). allofus: Interface 'Us' Researcher Workbench. doi:10.5281/zenodo.10420610, https://roux-ohdsi.github.io/allofus/.","code":"@Manual{,   title = {allofus: Interface for 'All of Us' Researcher Workbench},   author = {Louisa Smith and Rob Cavanaugh},   year = {2023},   url = {https://roux-ohdsi.github.io/allofus/},   doi = {10.5281/zenodo.10420610}, }"},{"path":"/index.html","id":"allofus-r-package","dir":"","previous_headings":"","what":"Interface for All of Us Researcher Workbench ","title":"Interface for All of Us Researcher Workbench ","text":"goal allofus R package streamline use R within Us Researcher Workbench. allofus R package affiliated endorsed Us Research Program. allofus package helps researchers query database build transparent reproducible analysed pipeline. package allows researchers easily use database packages, dbplyr DBI, Us database. package also includes functions help researchers manage storage workspace bucket, well take advantage tools developed OMOP CDM data.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Interface for All of Us Researcher Workbench ","text":"Install released version allofus CRAN: Install development version Github: new RStudio interface workbench, need manually specify CRAN mirror able download recently updated packages.","code":"install.packages(\"allofus\") install.packages(\"pak\") pak::pak(\"roux-ohdsi/allofus\") # specify the mirror directly install.packages(\"allofus\", repos = 'https://cloud.r-project.org')  # OR set the mirror as an option at the top of your script options(repos = c(CRAN = \"https://cloud.r-project.org\"))  # Github development versions may requires using the remotes package install.packages(\"remotes\") remotes::install_github(\"roux-ohdsi/allofus\", repos = 'https://cloud.r-project.org')"},{"path":"/index.html","id":"use","dir":"","previous_headings":"","what":"Use","title":"Interface for All of Us Researcher Workbench ","text":"Read getting started vignette learn use package.","code":""},{"path":"/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Interface for All of Us Researcher Workbench ","text":"Smith L, Cavanaugh R (2023). allofus: Interface ‘Us’ Researcher Workbench. doi:10.5281/zenodo.10420610, https://roux-ohdsi.github.io/allofus/. ","code":"citation(\"allofus\")"},{"path":"/index.html","id":"bugs","dir":"","previous_headings":"","what":"Bugs","title":"Interface for All of Us Researcher Workbench ","text":"Please leave us comments, requests, report bugs using “Issues” tab github located : https://github.com/roux-ohdsi/allofus/issues.","code":""},{"path":"/reference/CAST.html","id":null,"dir":"Reference","previous_headings":"","what":"Date add function to be passed along to SQL — CAST","title":"Date add function to be passed along to SQL — CAST","text":"Date add function passed along SQL","code":""},{"path":"/reference/CAST.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date add function to be passed along to SQL — CAST","text":"","code":"CAST(...)"},{"path":"/reference/CAST.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Date add function to be passed along to SQL — CAST","text":"... additional arguments passed dbplyr SQL","code":""},{"path":"/reference/CAST.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Date add function to be passed along to SQL — CAST","text":"Internal, passed along dbplyr SQL.","code":""},{"path":"/reference/DATE_ADD.html","id":null,"dir":"Reference","previous_headings":"","what":"Date add function to be passed along to SQL — DATE_ADD","title":"Date add function to be passed along to SQL — DATE_ADD","text":"Date add function passed along SQL","code":""},{"path":"/reference/DATE_ADD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date add function to be passed along to SQL — DATE_ADD","text":"","code":"DATE_ADD(...)"},{"path":"/reference/DATE_ADD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Date add function to be passed along to SQL — DATE_ADD","text":"... additional arguments passed dbplyr SQL","code":""},{"path":"/reference/DATE_ADD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Date add function to be passed along to SQL — DATE_ADD","text":"Internal, passed along dbplyr SQL.","code":""},{"path":"/reference/DATE_DIFF.html","id":null,"dir":"Reference","previous_headings":"","what":"Date add function to be passed along to SQL — DATE_DIFF","title":"Date add function to be passed along to SQL — DATE_DIFF","text":"Date add function passed along SQL","code":""},{"path":"/reference/DATE_DIFF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date add function to be passed along to SQL — DATE_DIFF","text":"","code":"DATE_DIFF(...)"},{"path":"/reference/DATE_DIFF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Date add function to be passed along to SQL — DATE_DIFF","text":"... additional arguments passed dbplyr SQL","code":""},{"path":"/reference/DATE_DIFF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Date add function to be passed along to SQL — DATE_DIFF","text":"Internal, passed along dbplyr SQL.","code":""},{"path":"/reference/STRING_AGG.html","id":null,"dir":"Reference","previous_headings":"","what":"Date add function to be passed along to SQL — STRING_AGG","title":"Date add function to be passed along to SQL — STRING_AGG","text":"Date add function passed along SQL","code":""},{"path":"/reference/STRING_AGG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date add function to be passed along to SQL — STRING_AGG","text":"","code":"STRING_AGG(...)"},{"path":"/reference/STRING_AGG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Date add function to be passed along to SQL — STRING_AGG","text":"... additional arguments passed dbplyr SQL","code":""},{"path":"/reference/STRING_AGG.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Date add function to be passed along to SQL — STRING_AGG","text":"Internal, passed along dbplyr SQL.","code":""},{"path":"/reference/allofus-package.html","id":null,"dir":"Reference","previous_headings":"","what":"allofus: Interface for 'All of Us' Researcher Workbench — allofus-package","title":"allofus: Interface for 'All of Us' Researcher Workbench — allofus-package","text":"Streamline use 'Us' Researcher Workbench (https://www.researchallofus.org/data-tools/workbench/)tools extract manipulate data 'Us' database. Increase interoperability Observational Health Data Science Informatics ('OHDSI') tool stack decreasing reliance 'Us' tools allowing cohort creation via 'Atlas'. Improve reproducible transparent research using 'Us'.","code":""},{"path":[]},{"path":"/reference/allofus-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"allofus: Interface for 'All of Us' Researcher Workbench — allofus-package","text":"Maintainer: Rob Cavanaugh r.cavanaugh@northeastern.edu (ORCID) [copyright holder] Authors: Louisa Smith l.smith@northeastern.edu (ORCID) [copyright holder]","code":""},{"path":"/reference/aou_atlas_cohort.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve a cohort from ATLAS for use in All of Us — aou_atlas_cohort","title":"Retrieve a cohort from ATLAS for use in All of Us — aou_atlas_cohort","text":"function retrieves cohort definition ATLAS generates cohort Us. Observation periods first generated subject using aou_observation_period() function. resulting cohort dataframe cohort start end dates subject. function based similar function https://github.com/cmayer2/r4aou tweaks generate appropriate observation periods incorporate package functions. Please see online vignette additional details insert link ","code":""},{"path":"/reference/aou_atlas_cohort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve a cohort from ATLAS for use in All of Us — aou_atlas_cohort","text":"","code":"aou_atlas_cohort(cohort_definition, cohort_sql, debug = FALSE, ...)"},{"path":"/reference/aou_atlas_cohort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve a cohort from ATLAS for use in All of Us — aou_atlas_cohort","text":"cohort_definition cohort definition generated using getCohortDefinition() ROhdsiWebApi cohort_sql cohort_sql generated using getCohortSql() ROhdsiWebApi debug Print query console; useful debugging. ... arguments passed along collect() collect = TRUE","code":""},{"path":"/reference/aou_atlas_cohort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve a cohort from ATLAS for use in All of Us — aou_atlas_cohort","text":"dataframe resulting cohort. SQL query used generate cohort stored attribute.","code":""},{"path":"/reference/aou_atlas_cohort.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve a cohort from ATLAS for use in All of Us — aou_atlas_cohort","text":"current observation period table Us OMOP CDM always appropriate cohorts generated using OHDSI tools ATLAS. observation periods overly short participants hundreds observation periods. function generates observation period table first occurrence clinical event EHR tables last clinical event EHR tables. return single observation period per person_id database. collect = FALSE, function returns query temporary table database can referenced typical dplyr functions. Normal OMOP conventions EHR suggest long lapses time bewteen clinical events may indicate person \"observed\" period. However, due diverse nature clinical EHR data contributed us, seems conservative assume person observed first last clinical event. See https://ohdsi.github.io/CommonDataModel/ehrObsPeriods.html details. users clinical events going back time widespread electronic medical record use (e.g., 1980s 1990s). function considers EHR data database, regardless date clinical event, recommend users consider implications including data 1980s 1990s. may prudent exclude data prior recent cutoff date EHR data likely accurate, though decision depends highly research question (see example ). Users note aou_observation_period function generate observation periods participants least one clinical observation. participant AllofUs research program include electronic health record data included cohort argument, elected contribute data data contribute, included generated observation period table.","code":""},{"path":"/reference/aou_atlas_cohort.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve a cohort from ATLAS for use in All of Us — aou_atlas_cohort","text":"","code":"if (FALSE) { # on_workbench() # generate a simple stroke cohort # see https://atlas-demo.ohdsi.org/#/cohortdefinition/1788061 # aou_cohort_example contains the results of # cd <- ROhdsiWebApi::getCohortDefinition(1788061, \"https://atlas-demo.ohdsi.org/WebAPI\") # cd_sql <- ROhdsiWebApi::getCohortSql(cd, \"https://atlas-demo.ohdsi.org/WebAPI\")  cohort <- aou_atlas_cohort(   cohort_definition = aou_cohort_example$cd,   cohort_sql = aou_cohort_example$cd_sql )  # print query that was executed cat(attr(cohort, \"query\")) }"},{"path":"/reference/aou_bucket_to_workspace.html","id":null,"dir":"Reference","previous_headings":"","what":"Move files from a bucket to your workspace — aou_bucket_to_workspace","title":"Move files from a bucket to your workspace — aou_bucket_to_workspace","text":"function retrieves file bucket moves workspace can read R, e.g., using function like write.csv(). See https://cloud.google.com/storage/docs/gsutil/commands/cp details underlying function.","code":""},{"path":"/reference/aou_bucket_to_workspace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Move files from a bucket to your workspace — aou_bucket_to_workspace","text":"","code":"aou_bucket_to_workspace(   file,   directory = FALSE,   bucket = getOption(\"aou.default.bucket\") )"},{"path":"/reference/aou_bucket_to_workspace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Move files from a bucket to your workspace — aou_bucket_to_workspace","text":"file name file bucket, vector multiple files, directory, file pattern (e.g. \".csv\"). directory Whether file refers entire directory want move. bucket Bucket retrieve file . Defaults getOption(\"aou.default.bucket\"), Sys.getenv('WORKSPACE_BUCKET') unless specified otherwise.","code":""},{"path":"/reference/aou_bucket_to_workspace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Move files from a bucket to your workspace — aou_bucket_to_workspace","text":"Nothing","code":""},{"path":"/reference/aou_bucket_to_workspace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Move files from a bucket to your workspace — aou_bucket_to_workspace","text":"","code":"if (FALSE) { # on_workbench() # save a file to the bucket tmp <- tempdir() write.csv(data.frame(x = 1), file.path(tmp,\"testdata.csv\")) aou_workspace_to_bucket(file.path(tmp,\"testdata.csv\")) # read the file back into the workspace aou_bucket_to_workspace(\"testdata.csv\") # read in to your local environment read.csv(\"testdata.csv\")  }"},{"path":"/reference/aou_codebook.html","id":null,"dir":"Reference","previous_headings":"","what":"All of Us Modified Codebook — aou_codebook","title":"All of Us Modified Codebook — aou_codebook","text":"table consists mapped rows publicly available Us Survey Codebook Us PPI Vocabulary available Athena . small number rows match codebook Athena PPI Vocabulary. can also accessed R using allofus::aou_codebook.","code":""},{"path":"/reference/aou_codebook.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"All of Us Modified Codebook — aou_codebook","text":"","code":"aou_codebook"},{"path":"/reference/aou_codebook.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"All of Us Modified Codebook — aou_codebook","text":"aou_codebook data frame 702 rows 11 columns: concept_code chr; Concept code AOU codebook concept_id int; mapped concept_id PPI vocabulary concept_name chr; Formatted text name concept concept_class_id chr; type survey item - question answer form_name int; name survey field_type chr; type question (radio, text, checkbox etc.) field_label chr; actual text question answer choices int; choices question radio checkbox standard_concept chr; Whether concept_id standard omop concept valid_start_Date chr; start date concept valid_end_Date int; end date concept link chr; link survey pdf","code":""},{"path":"/reference/aou_codebook.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"All of Us Modified Codebook — aou_codebook","text":"Questions relating specific conditions included part table. instead available aou_health_history table. Us codebook Code generate table","code":""},{"path":"/reference/aou_cohort_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Example cohort definition and SQL query from ATLAS — aou_cohort_example","title":"Example cohort definition and SQL query from ATLAS — aou_cohort_example","text":"list containing sample cohort definition SQL query demo ATLAS cohort stroke survivors.","code":""},{"path":"/reference/aou_cohort_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example cohort definition and SQL query from ATLAS — aou_cohort_example","text":"","code":"aou_cohort_example"},{"path":"/reference/aou_cohort_example.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example cohort definition and SQL query from ATLAS — aou_cohort_example","text":"aou_cohort_example cd Cohort definition object cd_sql SQL query cohort definition","code":""},{"path":"/reference/aou_compute.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a dplyr tbl SQL query into a temp table — aou_compute","title":"Compute a dplyr tbl SQL query into a temp table — aou_compute","text":"Experimental function computes temporary table tbl(con, \"table\") dplyr chain returns SQL query (e.g., show_query()). may useful create intermediate tables reduce long queries. workaround dplyr::compute(temporary = TRUE) currently work workbench. table exist current connection session need created new session.","code":""},{"path":"/reference/aou_compute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a dplyr tbl SQL query into a temp table — aou_compute","text":"","code":"aou_compute(.data, con = getOption(\"aou.default.con\"))"},{"path":"/reference/aou_compute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a dplyr tbl SQL query into a temp table — aou_compute","text":".data result tbl(con, \"table\") %>% ... query con connection aou_connect(). Set default","code":""},{"path":"/reference/aou_compute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a dplyr tbl SQL query into a temp table — aou_compute","text":"name temporary table database.","code":""},{"path":"/reference/aou_compute.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute a dplyr tbl SQL query into a temp table — aou_compute","text":"","code":"if (FALSE) { # on_workbench()  con <- aou_connect() tmp_tbl = tbl(con, \"concept\") %>%    select(concept_id) %>%    head(10) %>%    aou_compute()  tbl(con, tmp_tbl)  }"},{"path":"/reference/aou_concept_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Get occurrences of a concept set from AoU for a given cohort — aou_concept_set","title":"Get occurrences of a concept set from AoU for a given cohort — aou_concept_set","text":"Get occurrences concept set AoU given cohort","code":""},{"path":"/reference/aou_concept_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get occurrences of a concept set from AoU for a given cohort — aou_concept_set","text":"","code":"aou_concept_set(   cohort = NULL,   concepts,   start_date = NULL,   end_date = NULL,   domains = c(\"condition\", \"measurement\", \"observation\", \"procedure\", \"drug\", \"device\",     \"visit\"),   output = \"indicator\",   concept_set_name = \"concept_set\",   min_n = 1,   con = getOption(\"aou.default.con\"),   collect = FALSE,   ... )"},{"path":"/reference/aou_concept_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get occurrences of a concept set from AoU for a given cohort — aou_concept_set","text":"cohort query cohort local dataframe column called \"person_id\", (possibly) columns start_date end_date. provided, defaults entire Us cohort. concepts vector concept ids start_date chr; name start_date column cohort table; defaults NULL pull data across dates end_date chr; name end_date column cohort table; defaults NULL pull data across dates domains chr; vector domains search concepts (\"condition\", \"measurement\", \"observation\", \"procedure\", \"drug\", \"device\", \"visit\"); defaults output one \"indicator\", \"count\", \"\"; want return 1 person matching concepts 0 (\"indicator\"), number matching concepts per person (\"count\"), info matching concepts (\"\"). Defaults \"indicator\" concept_set_name chr; output = \"indicator\" output = \"n\", name column. Defaults \"concept_set\". min_n dbl; output = \"indicator\", minimum number occurrences per person consider indicator true. Defaults 1. con connection allofus SQL database. Defaults getOption(\"aou.default.con\"), set automatically use aou_connect() collect lgl; whether collect database ... arguments passed along collect() collect = TRUE","code":""},{"path":"/reference/aou_concept_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get occurrences of a concept set from AoU for a given cohort — aou_concept_set","text":"dataframe collect = TRUE; remote tbl ","code":""},{"path":"/reference/aou_concept_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get occurrences of a concept set from AoU for a given cohort — aou_concept_set","text":"","code":"if (FALSE) { # on_workbench() # indicator for any aspirin at any time aspirin_users <- aou_concept_set(dplyr::tbl(con, \"person\"),   concepts = 1191, concept_set_name = \"aspirin\", domains = \"drug\" )  # starting with person table to create a cohort people <- dplyr::tbl(con, \"person\") %>%   dplyr::filter(person_id < 2000000) %>%   dplyr::mutate(     start = as.Date(\"2021-01-01\"),     end = as.Date(\"2023-12-31\")   )  dat <- aou_concept_set(   cohort = people,   concepts = c(725115, 1612146, 1613031),   start_date = \"start\",   end_date = \"end\",   concept_set_name = \"CGM\",   output = \"all\" ) }"},{"path":"/reference/aou_connect.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a connection to the database in All of Us — aou_connect","title":"Create a connection to the database in All of Us — aou_connect","text":"Use function create BigQueryConnection object. can reference object connect Us database run SQL code using, e.g., dbplyr DBI. message printed connection status (successful ).","code":""},{"path":"/reference/aou_connect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a connection to the database in All of Us — aou_connect","text":"","code":"aou_connect(CDR = getOption(\"aou.default.cdr\"), ...)"},{"path":"/reference/aou_connect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a connection to the database in All of Us — aou_connect","text":"CDR name \"curated data repository\" connect . Defaults getOption(\"aou.default.cdr\"), Sys.getenv('WORKSPACE_CDR') specified otherwise (.e., \"mainline\" CDR). controlled tier, specify \"base\" CDR CDR = paste0(Sys.getenv('WORKSPACE_CDR'), \"_base\"). ... arguments passed along DBI::dbConnect().","code":""},{"path":"/reference/aou_connect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a connection to the database in All of Us — aou_connect","text":"BigQueryConnection object. object also saved option (getOption(\"aou.default.con\")).","code":""},{"path":"/reference/aou_connect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a connection to the database in All of Us — aou_connect","text":"","code":"if (FALSE) { # on_workbench() con <- aou_connect() # reference the observation table in the database dplyr::tbl(con, \"observation\") # print a list of the tables in the database DBI::dbListTables(con) }"},{"path":"/reference/aou_create_temp_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a temporary table from a local data frame or tibble — aou_create_temp_table","title":"Creates a temporary table from a local data frame or tibble — aou_create_temp_table","text":"Experimental function builds local tibble SQL query generates temporary table. Tables generally need small size (<1500 rows). table exist current connection session need created new session.","code":""},{"path":"/reference/aou_create_temp_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a temporary table from a local data frame or tibble — aou_create_temp_table","text":"","code":"aou_create_temp_table(   df,   nchar_batch = 1e+06,   con = getOption(\"aou.default.con\") )"},{"path":"/reference/aou_create_temp_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a temporary table from a local data frame or tibble — aou_create_temp_table","text":"df local dataframe tibble nchar_batch approximate number characters per sql query con connection","code":""},{"path":"/reference/aou_create_temp_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a temporary table from a local data frame or tibble — aou_create_temp_table","text":"reference temporary table database data df","code":""},{"path":"/reference/aou_create_temp_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a temporary table from a local data frame or tibble — aou_create_temp_table","text":"","code":"if (FALSE) { # on_workbench() con <- aou_connect() df <- data.frame(concept_id = c(439331, 4290245, 42535816, 46269813,                  2784565, 45765502, 434112, 4128031, 435640, 45876808),                  category = c(\"AB\", \"DELIV\", \"DELIV\", \"SA\", \"DELIV\",                  \"LB\", \"DELIV\", \"DELIV\", \"PREG\", \"SA\"),                  gest_value = c(NA, NA, NA, NA, NA, NA, NA, NA, 25, NA)) tmp_tbl = aou_create_temp_table(df)   }"},{"path":"/reference/aou_get_concepts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get concepts from a specified domain — aou_get_concepts","title":"Get concepts from a specified domain — aou_get_concepts","text":"Get concepts specified domain","code":""},{"path":"/reference/aou_get_concepts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get concepts from a specified domain — aou_get_concepts","text":"","code":"aou_get_concepts(   ...,   domain = c(\"condition\", \"measurement\", \"observation\", \"procedure\", \"drug\", \"device\") )"},{"path":"/reference/aou_get_concepts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get concepts from a specified domain — aou_get_concepts","text":"... Arguments passed specific `aou_get__concepts()` function domain character string specifying domain retrieve concepts . Must one : \"condition\", \"measurement\", \"observation\", \"procedure\", \"drug\", \"device\"","code":""},{"path":"/reference/aou_get_concepts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get concepts from a specified domain — aou_get_concepts","text":"list concepts specified domain","code":""},{"path":"/reference/aou_get_concepts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get concepts from a specified domain — aou_get_concepts","text":"","code":"aou_get_concepts(cohort, c(123, 456), start_date, end_date, domain = \"condition\") #> Error in aou_get_concepts(cohort, c(123, 456), start_date, end_date, domain = \"condition\"): could not find function \"aou_get_concepts\""},{"path":"/reference/aou_get_condition_concepts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get concepts from the condition table for a given cohort — aou_get_condition_concepts","title":"Get concepts from the condition table for a given cohort — aou_get_condition_concepts","text":"Get concepts condition table given cohort","code":""},{"path":"/reference/aou_get_condition_concepts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get concepts from the condition table for a given cohort — aou_get_condition_concepts","text":"","code":"aou_get_condition_concepts(cohort, concepts, start_date, end_date, ...)"},{"path":"/reference/aou_get_condition_concepts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get concepts from the condition table for a given cohort — aou_get_condition_concepts","text":"cohort cohort object concepts vector concept IDs filter start_date name column start date filtering condition occurrences end_date name column end date filtering condition occurrences ... Additional arguments pass aou_join","code":""},{"path":"/reference/aou_get_condition_concepts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get concepts from the condition table for a given cohort — aou_get_condition_concepts","text":"data frame columns person_id, date, concept_id, concept_name, domain = \"condition\"","code":""},{"path":"/reference/aou_get_condition_concepts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get concepts from the condition table for a given cohort — aou_get_condition_concepts","text":"","code":"aou_get_condition_concepts(cohort, c(123, 456), start_date, end_date) #> Error in aou_get_condition_concepts(cohort, c(123, 456), start_date, end_date): could not find function \"aou_get_condition_concepts\""},{"path":"/reference/aou_get_device_concepts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get concepts from the device exposure table for a given cohort — aou_get_device_concepts","title":"Get concepts from the device exposure table for a given cohort — aou_get_device_concepts","text":"Get concepts device exposure table given cohort","code":""},{"path":"/reference/aou_get_device_concepts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get concepts from the device exposure table for a given cohort — aou_get_device_concepts","text":"","code":"aou_get_device_concepts(cohort, concepts, start_date, end_date, ...)"},{"path":"/reference/aou_get_device_concepts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get concepts from the device exposure table for a given cohort — aou_get_device_concepts","text":"cohort cohort object concepts vector concept IDs filter start_date name column start date filtering devices end_date name column end date filtering devices ... Additional arguments pass aou_join","code":""},{"path":"/reference/aou_get_device_concepts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get concepts from the device exposure table for a given cohort — aou_get_device_concepts","text":"data frame columns person_id, date, concept_id, concept_name, domain = \"device\"","code":""},{"path":"/reference/aou_get_device_concepts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get concepts from the device exposure table for a given cohort — aou_get_device_concepts","text":"","code":"aou_get_device_concepts(cohort, c(123, 456), start_date, end_date) #> Error in aou_get_device_concepts(cohort, c(123, 456), start_date, end_date): could not find function \"aou_get_device_concepts\""},{"path":"/reference/aou_get_drug_concepts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get concepts from the drug exposure table for a given cohort — aou_get_drug_concepts","title":"Get concepts from the drug exposure table for a given cohort — aou_get_drug_concepts","text":"Get concepts drug exposure table given cohort","code":""},{"path":"/reference/aou_get_drug_concepts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get concepts from the drug exposure table for a given cohort — aou_get_drug_concepts","text":"","code":"aou_get_drug_concepts(cohort, concepts, start_date, end_date, ...)"},{"path":"/reference/aou_get_drug_concepts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get concepts from the drug exposure table for a given cohort — aou_get_drug_concepts","text":"cohort cohort object concepts vector concept IDs filter start_date name column start date filtering drugs end_date name column end date filtering drugs ... Additional arguments pass aou_join","code":""},{"path":"/reference/aou_get_drug_concepts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get concepts from the drug exposure table for a given cohort — aou_get_drug_concepts","text":"data frame columns person_id, date, concept_id, concept_name, domain = \"drug\"","code":""},{"path":"/reference/aou_get_drug_concepts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get concepts from the drug exposure table for a given cohort — aou_get_drug_concepts","text":"","code":"aou_get_drug_concepts(cohort, c(123, 456), start_date, end_date) #> Error in aou_get_drug_concepts(cohort, c(123, 456), start_date, end_date): could not find function \"aou_get_drug_concepts\""},{"path":"/reference/aou_get_measurement_concepts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get concepts from the measurement table for a given cohort — aou_get_measurement_concepts","title":"Get concepts from the measurement table for a given cohort — aou_get_measurement_concepts","text":"Get concepts measurement table given cohort","code":""},{"path":"/reference/aou_get_measurement_concepts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get concepts from the measurement table for a given cohort — aou_get_measurement_concepts","text":"","code":"aou_get_measurement_concepts(cohort, concepts, start_date, end_date, ...)"},{"path":"/reference/aou_get_measurement_concepts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get concepts from the measurement table for a given cohort — aou_get_measurement_concepts","text":"cohort cohort object concepts vector concept IDs filter start_date name column start date filtering measurements end_date name column end date filtering measurements ... Additional arguments pass aou_join","code":""},{"path":"/reference/aou_get_measurement_concepts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get concepts from the measurement table for a given cohort — aou_get_measurement_concepts","text":"data frame columns person_id, date, concept_id, concept_name, domain = \"measurement\"","code":""},{"path":"/reference/aou_get_measurement_concepts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get concepts from the measurement table for a given cohort — aou_get_measurement_concepts","text":"","code":"aou_get_measurement_concepts(cohort, c(123, 456), start_date, end_date) #> Error in aou_get_measurement_concepts(cohort, c(123, 456), start_date,     end_date): could not find function \"aou_get_measurement_concepts\""},{"path":"/reference/aou_get_observation_concepts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get concepts from the observation table for a given cohort — aou_get_observation_concepts","title":"Get concepts from the observation table for a given cohort — aou_get_observation_concepts","text":"Get concepts observation table given cohort","code":""},{"path":"/reference/aou_get_observation_concepts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get concepts from the observation table for a given cohort — aou_get_observation_concepts","text":"","code":"aou_get_observation_concepts(cohort, concepts, start_date, end_date, ...)"},{"path":"/reference/aou_get_observation_concepts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get concepts from the observation table for a given cohort — aou_get_observation_concepts","text":"cohort cohort object concepts vector concept IDs filter start_date name column start date filtering observations end_date name column end date filtering observations ... Additional arguments pass aou_join","code":""},{"path":"/reference/aou_get_observation_concepts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get concepts from the observation table for a given cohort — aou_get_observation_concepts","text":"data frame columns person_id, date, concept_id, concept_name, domain = \"observation\"","code":""},{"path":"/reference/aou_get_observation_concepts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get concepts from the observation table for a given cohort — aou_get_observation_concepts","text":"","code":"aou_get_observation_concepts(cohort, c(123, 456), start_date, end_date) #> Error in aou_get_observation_concepts(cohort, c(123, 456), start_date,     end_date): could not find function \"aou_get_observation_concepts\""},{"path":"/reference/aou_get_procedure_concepts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get concepts from the procedure table for a given cohort — aou_get_procedure_concepts","title":"Get concepts from the procedure table for a given cohort — aou_get_procedure_concepts","text":"Get concepts procedure table given cohort","code":""},{"path":"/reference/aou_get_procedure_concepts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get concepts from the procedure table for a given cohort — aou_get_procedure_concepts","text":"","code":"aou_get_procedure_concepts(cohort, concepts, start_date, end_date, ...)"},{"path":"/reference/aou_get_procedure_concepts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get concepts from the procedure table for a given cohort — aou_get_procedure_concepts","text":"cohort cohort object concepts vector concept IDs filter start_date name column start date filtering procedures end_date name column end date filtering procedures ... Additional arguments pass aou_join","code":""},{"path":"/reference/aou_get_procedure_concepts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get concepts from the procedure table for a given cohort — aou_get_procedure_concepts","text":"data frame columns person_id, date, concept_id, concept_name, domain = \"procedure\"","code":""},{"path":"/reference/aou_get_procedure_concepts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get concepts from the procedure table for a given cohort — aou_get_procedure_concepts","text":"","code":"aou_get_procedure_concepts(cohort, c(123, 456), start_date, end_date) #> Error in aou_get_procedure_concepts(cohort, c(123, 456), start_date, end_date): could not find function \"aou_get_procedure_concepts\""},{"path":"/reference/aou_health_history.html","id":null,"dir":"Reference","previous_headings":"","what":"All of Us Health History Codebook — aou_health_history","title":"All of Us Health History Codebook — aou_health_history","text":"table consists rows codebook pertaining health history questions. early Us surveys, questions asked separately respondent respondent's family. current version, questions asked survey. nested nature questions makes challenging deal . can also accessed R using allofus::aou_health_history. Code generate table","code":""},{"path":"/reference/aou_health_history.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"All of Us Health History Codebook — aou_health_history","text":"","code":"aou_health_history"},{"path":"/reference/aou_health_history.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"All of Us Health History Codebook — aou_health_history","text":"aou_health_history data frame 1685  rows 9 columns: question chr; Question asked survey relative chr; Person answer pertains condition chr; Formatted text name concept category chr; Type health condition concept_code chr; Concept code AOU codebook concept_id_specific int; Concept id answer concept_id_overall int; Concept id condition overall concept_id_question int; Concept id overarching question form_name chr; Survey name","code":""},{"path":"/reference/aou_join.html","id":null,"dir":"Reference","previous_headings":"","what":"Join current query to another table — aou_join","title":"Join current query to another table — aou_join","text":"Simple wrapper join functions join existing query another table Us database.","code":""},{"path":"/reference/aou_join.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join current query to another table — aou_join","text":"","code":"aou_join(   data,   table,   type,   by = NULL,   suffix = c(\"_x\", \"_y\"),   con = getOption(\"aou.default.con\"),   x_as = NULL,   y_as = NULL,   ... )"},{"path":"/reference/aou_join.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join current query to another table — aou_join","text":"data unexecuted SQL query dbplyr/dplyr. table omop table (remote table schema) wish join, character string, tbl object. type type join. use types available dplyr: left, right, inner, anti, full etc. columns join suffix suffix preferences add joining data column names specified argument. con connection allofus SQL database. Defaults getOption(\"aou.default.con\"), set automatically use aou_connect() x_as optional; string name left table y_as optional; string name right table ... arguments passed join function. e.g., = \"person_id\"","code":""},{"path":"/reference/aou_join.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Join current query to another table — aou_join","text":"Continued dbplyr query","code":""},{"path":"/reference/aou_join.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Join current query to another table — aou_join","text":"good reasons use aou_join() possible x_join functions dplyr. First, reduces code necessary join existing table another table. Second, includes checks/workarounds two sources common errors using dbplyr: automatically appends x_as y_as arguments join call provided changes default suffix .x/.y _x/_y cases shared column names specified argument result SQL error.","code":""},{"path":"/reference/aou_join.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Join current query to another table — aou_join","text":"","code":"if (FALSE) { # on_workbench()  con <- aou_connect() obs_tbl <- dplyr::tbl(con, \"observation\") %>%   dplyr::select(-provider_id) obs_tbl %>%   aou_join(\"person\", type = \"left\", by = \"person_id\") }"},{"path":"/reference/aou_ls_bucket.html","id":null,"dir":"Reference","previous_headings":"","what":"List the current files in your bucket — aou_ls_bucket","title":"List the current files in your bucket — aou_ls_bucket","text":"files stored bucket easily visible notebook. List files bucket files matching certain pattern.","code":""},{"path":"/reference/aou_ls_bucket.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List the current files in your bucket — aou_ls_bucket","text":"","code":"aou_ls_bucket(   pattern = \"\",   silent = FALSE,   recursive = TRUE,   bucket = getOption(\"aou.default.bucket\"),   gsutil_args = \"\" )"},{"path":"/reference/aou_ls_bucket.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List the current files in your bucket — aou_ls_bucket","text":"pattern Regular expression, \"*.csv\" single file name e.g., \"mydata.csv\". Default find files apart notebooks (.ipynb files). silent Whether omit names files found. Defaults FALSE. recursive Whether search subdirectories. Defaults TRUE. bucket Bucket retrieve file . Defaults getOption(\"aou.default.bucket\"), Sys.getenv('WORKSPACE_BUCKET') unless specified otherwise. gsutil_args string containing arguments passed gsutil ls. See https://cloud.google.com/storage/docs/gsutil/commands/ls details.","code":""},{"path":"/reference/aou_ls_bucket.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List the current files in your bucket — aou_ls_bucket","text":"vector file names","code":""},{"path":"/reference/aou_ls_bucket.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List the current files in your bucket — aou_ls_bucket","text":"","code":"if (FALSE) { # on_workbench() # list all files, including in subdirectories aou_ls_bucket() # list all csv files aou_ls_bucket(\"*.csv\") }"},{"path":"/reference/aou_ls_workspace.html","id":null,"dir":"Reference","previous_headings":"","what":"List the current files in your workspace — aou_ls_workspace","title":"List the current files in your workspace — aou_ls_workspace","text":"files stored workspace easily visible notebook. List files workspace (apart notebooks) files matching certain pattern.","code":""},{"path":"/reference/aou_ls_workspace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List the current files in your workspace — aou_ls_workspace","text":"","code":"aou_ls_workspace(pattern = \"\", silent = FALSE, ...)"},{"path":"/reference/aou_ls_workspace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List the current files in your workspace — aou_ls_workspace","text":"pattern Regular expression, \"*.csv\" single file name e.g., \"mydata.csv\". Default find files apart notebooks (.ipynb files). silent Whether omit names files found. Defaults FALSE. ... arguments passed list.files()","code":""},{"path":"/reference/aou_ls_workspace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List the current files in your workspace — aou_ls_workspace","text":"vector file names","code":""},{"path":"/reference/aou_ls_workspace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List the current files in your workspace — aou_ls_workspace","text":"","code":"my_workspace_files <- aou_ls_workspace(silent = TRUE) aou_ls_workspace(\"*.csv\") #> ! No files found with that pattern. aou_ls_workspace(path = \"data\") #> ! No files found with that pattern."},{"path":"/reference/aou_observation_period.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate an observation period table based on OMOP Conventions — aou_observation_period","title":"Generate an observation period table based on OMOP Conventions — aou_observation_period","text":"Generate observation period table based OMOP Conventions","code":""},{"path":"/reference/aou_observation_period.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate an observation period table based on OMOP Conventions — aou_observation_period","text":"","code":"aou_observation_period(   con = getOption(\"aou.default.con\"),   collect = FALSE,   ... )"},{"path":"/reference/aou_observation_period.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate an observation period table based on OMOP Conventions — aou_observation_period","text":"con Connection allofus SQL database. Defaults getOption(\"aou.default.con\"), set automatically use aou_connect() collect Whether collect data keep SQL query. Defaults FALSE. ... arguments passed along collect() collect = TRUE","code":""},{"path":"/reference/aou_observation_period.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate an observation period table based on OMOP Conventions — aou_observation_period","text":"sql query local data frame person_id, observation_period_start_date, observation_period_end_date","code":""},{"path":"/reference/aou_observation_period.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate an observation period table based on OMOP Conventions — aou_observation_period","text":"current observation period table Us OMOP CDM always appropriate cohorts generated using OHDSI tools ATLAS. observation periods overly short participants hundreds observation periods. function generates observation period table first occurrence clinical event EHR tables last clinical event EHR tables. return single observation period per person_id database. collect = FALSE, function returns query temporary table database can referenced typical dplyr functions. Normal OMOP conventions EHR suggest long lapses time bewteen clinical events may indicate person \"observed\" period. However, due diverse nature clinical EHR data contributed us, seems conservative assume person observed first last clinical event. See https://ohdsi.github.io/CommonDataModel/ehrObsPeriods.html details. users clinical events going back time widespread electronic medical record use (e.g., 1980s 1990s). function considers EHR data database, regardless date clinical event, recommend users consider implications including data 1980s 1990s. may prudent exclude data prior recent cutoff date EHR data likely accurate, though decision depends highly research question (see example ). Users note aou_observation_period function generate observation periods participants least one clinical observation. participant AllofUs research program include electronic health record data included cohort argument, elected contribute data data contribute, included generated observation period table.","code":""},{"path":"/reference/aou_observation_period.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate an observation period table based on OMOP Conventions — aou_observation_period","text":"","code":"if (FALSE) { # on_workbench() # create observation_period table for everyone observation_period_tbl <- aou_observation_period()  # create an index date as the first date a survey was taken index_date_tbl <- tbl(con, \"ds_survey\") %>%   group_by(person_id) %>%   filter(survey_datetime == min(survey_datetime)) %>%   mutate(index_date = as.Date(survey_datetime)) %>%   distinct(person_id, index_date)  # create a cohort of participants with EHR data and at least one year # of observation starting on the date they took the first survey cohort <- dplyr::tbl(con, \"cb_search_person\") %>%   dplyr::filter(has_ehr_data == 1) %>%   inner_join(index_date_tbl, by = \"person_id\") %>%   inner_join(observation_period_tbl, by = \"person_id\") %>%   filter(observation_period_end_date >= DATE_ADD(index_date,                                                  dplyr::sql(paste0(\"INTERVAL \", 1, \" year\"))),          observation_period_start_date <= index_date) %>%   select(person_id, gender, sex_at_birth, race, ethnicity, age_at_consent)  # head(cohort)  # create an observation period table with a minimum start date (e.g., 2010-01-01) observation_period_tbl %>%   mutate(observation_period_start_date =            if_else(observation_period_start_date < as.Date(\"2010-01-01\"),                    as.Date(\"2010-01-01\"),                    observation_period_start_date)) %>%   filter(observation_period_end_date > as.Date(\"2010-01-01\")) }"},{"path":"/reference/aou_pull_concepts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get occurrences of a concepts from AoU for a given cohort — aou_pull_concepts","title":"Get occurrences of a concepts from AoU for a given cohort — aou_pull_concepts","text":"Get occurrences concepts AoU given cohort","code":""},{"path":"/reference/aou_pull_concepts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get occurrences of a concepts from AoU for a given cohort — aou_pull_concepts","text":"","code":"aou_pull_concepts(   cohort,   concepts,   start_date,   end_date,   concept_set_name = \"concepts\",   domains = c(\"condition\", \"measurement\", \"observation\", \"procedure\", \"drug\", \"device\"),   min_n = NULL,   n = FALSE,   keep_all = FALSE,   con = getOption(\"aou.default.con\"),   collect = TRUE,   ... )"},{"path":"/reference/aou_pull_concepts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get occurrences of a concepts from AoU for a given cohort — aou_pull_concepts","text":"cohort tbl; reference table column called \"person_id\", columns start_date end_date concepts num; vector concept ids start_date name start_date column cohort table (unquoted) end_date name end_date column cohort table (unquoted) concept_set_name chr; Name describe concept set, used create indicator variable min_n dbl; minimum number occurrences per person consider indicator true n dbl; count number occurrences per person (include zeros) keep_all lgl; keep columns information concept (e.g., concept name, id, etc.) con connection object AoU collect lgl; whether collect database","code":""},{"path":"/reference/aou_pull_concepts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get occurrences of a concepts from AoU for a given cohort — aou_pull_concepts","text":"dataframe collect = TRUE; remote tbl ","code":""},{"path":"/reference/aou_pull_concepts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get occurrences of a concepts from AoU for a given cohort — aou_pull_concepts","text":"","code":"if (FALSE) { # simple example tobacco <- pull_concepts(cohort, concepts = 1157, start_date = covariate_start_date,  end_date = cohort_start_date, name = \"tobacco\")  # starting with person table people <- tbl(con, \"cb_search_person\") %>% mutate(start_date = as.Date(\"1970-01-01\"),        end_date = as.Date(\"2023-05-24\"))  dat <- aou_pull_concepts(cohort = people,                          concepts = c(725115, 1612146, 1613031),                          start_date = start_date,                          end_date = end_date, concept_set_name = \"CGM\",                          domains = c(\"condition\", \"measurement\", \"observation\", \"procedure\", \"drug\", \"device\"),                          keep_all = TRUE)  }"},{"path":"/reference/aou_pull_survey_concepts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get survey questions from AoU for a given cohort — aou_pull_survey_concepts","title":"Get survey questions from AoU for a given cohort — aou_pull_survey_concepts","text":"Get survey questions AoU given cohort","code":""},{"path":"/reference/aou_pull_survey_concepts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get survey questions from AoU for a given cohort — aou_pull_survey_concepts","text":"","code":"aou_pull_survey_concepts(   cohort,   concepts,   collect = TRUE,   reshape = FALSE,   ... )"},{"path":"/reference/aou_pull_survey_concepts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get survey questions from AoU for a given cohort — aou_pull_survey_concepts","text":"cohort tbl; reference table column called \"person_id\" concepts num; vector concept ids questions survey table collect lgl; whether collect database reshape lgl; whether turn long data wide data clean variable names","code":""},{"path":"/reference/aou_pull_survey_concepts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get survey questions from AoU for a given cohort — aou_pull_survey_concepts","text":"reshape = FALSE, dataframe remote tbl columns person_id, date (survey_datetime),  concept_id (question_concept_id), question, answer. reshape = TRUE, dataframe  questions columns. multiple answers per person (\"checkbox\" questions) list-columns.","code":""},{"path":[]},{"path":"/reference/aou_session_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Print session information for the AoU R environment — aou_session_info","title":"Print session information for the AoU R environment — aou_session_info","text":"purposes reproducibility, important know version R, packages, AoU release using. function prints information console.","code":""},{"path":"/reference/aou_session_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print session information for the AoU R environment — aou_session_info","text":"","code":"aou_session_info(CDR = getOption(\"aou.default.cdr\"))"},{"path":"/reference/aou_session_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print session information for the AoU R environment — aou_session_info","text":"CDR name CDR use. Defaults getOption(\"aou.default.cdr\")","code":""},{"path":"/reference/aou_session_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print session information for the AoU R environment — aou_session_info","text":"list three elements: platform, AoU release, packages","code":""},{"path":"/reference/aou_session_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print session information for the AoU R environment — aou_session_info","text":"","code":"if (FALSE) { # on_workbench() allofus::aou_session_info() }"},{"path":"/reference/aou_sql.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute a SQL query on the All of Us database — aou_sql","title":"Execute a SQL query on the All of Us database — aou_sql","text":"Execute SQL query Us database","code":""},{"path":"/reference/aou_sql.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute a SQL query on the All of Us database — aou_sql","text":"","code":"aou_sql(query, CDR = getOption(\"aou.default.cdr\"), debug = FALSE, ...)"},{"path":"/reference/aou_sql.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute a SQL query on the All of Us database — aou_sql","text":"query SQL query (BigQuery dialect) executed. Interpreted glue::glue(), expressions enclosed braces evaluated. References \"{CDR}\" \"{cdr}\" evaluated automatically (see examples). CDR name \"curated data repository\" used references form \"{CDR}\" \"{cdr}\" query (see examples). Defaults getOption(\"aou.default.cdr\"), Sys.getenv('WORKSPACE_CDR') specified otherwise (.e., \"mainline\" CDR). controlled tier, specify \"base\" CDR CDR = paste0(Sys.getenv('WORKSPACE_CDR'), \"_base\"). debug Print query console; useful debugging. ... arguments passed bigrquery::bq_table_download()","code":""},{"path":"/reference/aou_sql.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute a SQL query on the All of Us database — aou_sql","text":"dataframe results query.","code":""},{"path":"/reference/aou_sql.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Execute a SQL query on the All of Us database — aou_sql","text":"","code":"if (FALSE) { # on_workbench() # Examples based on AoU snippets aou_sql(\"   -- Compute the count of unique participants in our All of Us cohort.   SELECT   COUNT(DISTINCT person_id) AS total_number_of_participants   FROM   `{CDR}.person` \")  MEASUREMENT_OF_INTEREST <- \"hemoglobin\" aou_sql(' -- Compute summary information for our measurements of interest for our cohort. -- -- PARAMETERS: --   MEASUREMENT_OF_INTEREST: a case-insensitive string, such as \"hemoglobin\", to be compared --                            to all measurement concept names to identify those of interest  WITH   --   -- Use a case insensitive string to search the measurement concept names of those   -- measurements we do have in the measurements table.   --   labs_of_interest AS (   SELECT     measurement_concept_id,     measurement_concept.concept_name AS measurement_name,     unit_concept_id,     unit_concept.concept_name AS unit_name   FROM     `{CDR}.measurement`   LEFT JOIN `{CDR}.concept` AS measurement_concept   ON measurement_concept.concept_id = measurement_concept_id   LEFT JOIN `{CDR}.concept` AS unit_concept   ON unit_concept.concept_id = unit_concept_id   WHERE     REGEXP_CONTAINS(measurement_concept.concept_name, r\"(?i){MEASUREMENT_OF_INTEREST}\")   GROUP BY     measurement_concept_id,     unit_concept_id,     measurement_concept.concept_name,     unit_concept.concept_name )   --   -- Summarize the information about each measurement concept of interest that our   -- prior query identified.   -- SELECT   measurement_name AS measurement,   IFNULL(unit_name, \"NA\") AS unit,   COUNT(1) AS N,   COUNTIF(value_as_number IS NULL     AND (value_as_concept_id IS NULL       OR value_as_concept_id = 0)) AS missing,   MIN(value_as_number) AS min,   MAX(value_as_number) AS max,   AVG(value_as_number) AS avg,   STDDEV(value_as_number) AS stddev,   APPROX_QUANTILES(value_as_number, 4) AS quantiles,   COUNTIF(value_as_number IS NOT NULL) AS num_numeric_values,   COUNTIF(value_as_concept_id IS NOT NULL       AND value_as_concept_id != 0) AS num_concept_values,   COUNTIF(operator_concept_id IS NOT NULL) AS num_operators,   IF(src_id = \"PPI/PM\", \"PPI\", \"EHR\") AS measurement_source,   measurement_concept_id,   unit_concept_id FROM   `{CDR}.measurement` INNER JOIN  labs_of_interest USING(measurement_concept_id, unit_concept_id) LEFT JOIN   `{CDR}.measurement_ext` USING(measurement_id) GROUP BY   measurement_concept_id,   measurement_name,   measurement_source,   unit_concept_id,   unit_name ORDER BY   N DESC ', debug = TRUE) }"},{"path":"/reference/aou_survey.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to query allofus observation table for survey responses — aou_survey","title":"Function to query allofus observation table for survey responses — aou_survey","text":"responses survey questions stored ds_survey table include skipped questions (.e., missing data!), function makes easier query observation table responses survey questions skipped responses included. function return dataframe SQL tbl initial cohort table along column question included questions answers person_id cells. column names (questions) can returned concept_code concept_id providing new column names. question, column suffix \"_date\" included date question answered. questions can multiple answers (\"checkbox\"-style questions), answers returned comma-separated string. find desired survey questions, use us data dictionary, survey codebook, athena, data browser, allofus R package modified codebook can found : https://roux-ohdsi.github.io/allofus/articles/searchable_codebook.html questions regarding individual's health history family health history, function requires specific concept_id (concept_code) individual question, whether \"self\" another relative. Responses returned \"Yes\" respondent answered individual condition, \"\" respondent answered individual condition (omitted selecting related conditions), skip response question skipped, NA respondent answer question.","code":""},{"path":"/reference/aou_survey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to query allofus observation table for survey responses — aou_survey","text":"","code":"aou_survey(   cohort = NULL,   questions,   question_output = \"concept_code\",   clean_answers = TRUE,   con = getOption(\"aou.default.con\"),   collect = FALSE,   ... )"},{"path":"/reference/aou_survey.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to query allofus observation table for survey responses — aou_survey","text":"cohort tbl dataframe cohort includes column called person_id questions either vector concept_ids concept_codes questions return results question_output name columns. Options include text concept code (\"concept_code\"), concept ids preceded \"x_\" (\"concept_id\"), using custom vector column names matching vector questions. Defaults \"concept_code\". clean_answers whether clean answers survey questions. Defaults TRUE. con connection allofus SQL database. Defaults getOption(\"aou.default.con\"), created automatically aou_connect() collect whether return results local (TRUE) database table ... additional arguments passed collect() collect = TRUE","code":""},{"path":"/reference/aou_survey.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to query allofus observation table for survey responses — aou_survey","text":"dataframe collect = TRUE; remote tbl ","code":""},{"path":"/reference/aou_survey.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to query allofus observation table for survey responses — aou_survey","text":"","code":"if (FALSE) { # on_workbench()  con <- aou_connect() cohort <- dplyr::tbl(con, \"person\") %>%   dplyr::filter(person_id > 5000000) %>%   dplyr::select(person_id, year_of_birth, gender_concept_id)  aou_survey(   cohort,   questions = c(1585375, 1586135),   question_output = \"concept_code\" ) aou_survey(   cohort,   questions = c(1585811, 1585386),   question_output = c(\"pregnancy\", \"insurance\") ) aou_survey(   cohort,   questions = c(1585375, 1586135, 1740719, 43529932),   question_output = c(\"income\", \"birthplace\", \"grandpa_bowel_obstruction\", \"t2dm\"),   collect = FALSE )  aou_survey(cohort,   questions = 1384452,   question_output = \"osteoarthritis\" ) %>%   dplyr::count(osteoarthritis) }"},{"path":"/reference/aou_table_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Table of tables, columns, and use for researchers from the CT data dictionary — aou_table_info","title":"Table of tables, columns, and use for researchers from the CT data dictionary — aou_table_info","text":"data frame containing tables columns aou OMOP CDM created https://docs.google.com/spreadsheets/d/1XLVq84LLd0VZMioF2sPwyiaPw3EFp5c8o1CTWGPH-Yc/edit#gid=1815943286. Note column 'value_source_value' manually added missing data dictionary. Code generate table","code":""},{"path":"/reference/aou_table_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table of tables, columns, and use for researchers from the CT data dictionary — aou_table_info","text":"","code":"aou_table_info"},{"path":"/reference/aou_table_info.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Table of tables, columns, and use for researchers from the CT data dictionary — aou_table_info","text":"aou_table_info table_name chr; name table columns chr; columns table recommended_for_research chr; whether table recomended research","code":""},{"path":"/reference/aou_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"List tables in the AoU Database — aou_tables","title":"List tables in the AoU Database — aou_tables","text":"List tables AoU Database","code":""},{"path":"/reference/aou_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List tables in the AoU Database — aou_tables","text":"","code":"aou_tables(con = getOption(\"aou.default.con\"), remove_na = TRUE)"},{"path":"/reference/aou_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List tables in the AoU Database — aou_tables","text":"con Connection allofus SQL database. Defaults getOption(\"aou.default.con\"), created automatically aou_connect() remove_na Whether remove tables data dictionary. Defaults TRUE","code":""},{"path":"/reference/aou_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List tables in the AoU Database — aou_tables","text":"dataframe table names number columns","code":""},{"path":"/reference/aou_tables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List tables in the AoU Database — aou_tables","text":"","code":"if (FALSE) { # on_workbench() con <- aou_connect() aou_tables() }"},{"path":"/reference/aou_test_connect.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function to test allofus package on fake database — aou_test_connect","title":"Internal function to test allofus package on fake database — aou_test_connect","text":"Internal function test allofus package fake database","code":""},{"path":"/reference/aou_test_connect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function to test allofus package on fake database — aou_test_connect","text":"","code":"aou_test_connect(   cache = TRUE,   cache_dir = Sys.getenv(\"AOU_CACHE_DIR\"),   overwrite = FALSE )"},{"path":"/reference/aou_test_connect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function to test allofus package on fake database — aou_test_connect","text":"cache logical indicating whether cache downloaded data cache_dir character string specifying directory store cached data overwrite logical indicating whether overwrite existing cached data","code":""},{"path":"/reference/aou_test_connect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function to test allofus package on fake database — aou_test_connect","text":"database connection object","code":""},{"path":"/reference/aou_test_connect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Internal function to test allofus package on fake database — aou_test_connect","text":"function downloads test OMOP database OHDSI Eunomia package, renames tables fields lowercase, removes tables relevant Us, adds missing fields relevant tables, drops fields relevant Us. tests connection database checking person_id column person table.","code":""},{"path":"/reference/aou_test_connect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Internal function to test allofus package on fake database — aou_test_connect","text":"","code":"if (FALSE) { con <- aou_test_connect() }"},{"path":"/reference/aou_workspace_to_bucket.html","id":null,"dir":"Reference","previous_headings":"","what":"Save a file from your workspace to your bucket — aou_workspace_to_bucket","title":"Save a file from your workspace to your bucket — aou_workspace_to_bucket","text":"function moves file saved workspace bucket, can retrieved even environment deleted. use, first save desired object file workspace (e.g., write.csv(object, \"filename.csv\")) run function (e.g., aou_workspace_to_bucket(files = \"filename.csv\")). See https://cloud.google.com/storage/docs/gsutil/commands/cp details underlying function.","code":""},{"path":"/reference/aou_workspace_to_bucket.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save a file from your workspace to your bucket — aou_workspace_to_bucket","text":"","code":"aou_workspace_to_bucket(   file,   directory = FALSE,   bucket = getOption(\"aou.default.bucket\") )"},{"path":"/reference/aou_workspace_to_bucket.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save a file from your workspace to your bucket — aou_workspace_to_bucket","text":"file name file bucket, vector multiple files, directory, file pattern (e.g. \".csv\"). See Details. directory Whether file refers entire directory want move. bucket Bucket save files . Defaults getOption(\"aou.default.bucket\"), Sys.getenv('WORKSPACE_BUCKET') unless specified otherwise.","code":""},{"path":"/reference/aou_workspace_to_bucket.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save a file from your workspace to your bucket — aou_workspace_to_bucket","text":"Nothing","code":""},{"path":"/reference/aou_workspace_to_bucket.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save a file from your workspace to your bucket — aou_workspace_to_bucket","text":"","code":"if (FALSE) { # on_workbench() # create test files in a temporary directory tmp <- tempdir() write.csv(data.frame(x = 1), file.path(tmp,\"testdata1.csv\")) write.csv(data.frame(y = 2), file.path(tmp,\"testdata2.csv\")) # save a file to the bucket aou_workspace_to_bucket(file.path(tmp, \"testdata1.csv\")) # save multiple files at once aou_workspace_to_bucket(c(file.path(tmp, \"testdata1.csv\"), file.path(tmp, \"testdata2.csv\"))) # save an entire directory aou_workspace_to_bucket(tmp, directory = TRUE) }"},{"path":"/reference/bookstore.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to Install and Load R Packages — bookstore","title":"Function to Install and Load R Packages — bookstore","text":"Function Install Load R Packages","code":""},{"path":"/reference/bookstore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to Install and Load R Packages — bookstore","text":"","code":"bookstore(package_names, quietly = TRUE)"},{"path":"/reference/bookstore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to Install and Load R Packages — bookstore","text":"package_names character vector package names CRAN github description bookstore() function check see packages provided already installed local machine. installed, look package CRAN install found. find package CRAN, 'll ask owner/repository_name github install package github. input provided without quotes. example, respond roux-ohdsi/ohdsilab \"roux-ohdsi/ohdsilab\".","code":""},{"path":"/reference/bookstore.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to Install and Load R Packages — bookstore","text":"","code":"if (FALSE) { bookstore(c(\"aouFI\", \"CohortGenerator\", \"tidyr\")) }"},{"path":"/reference/get_domain_concepts.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieves domain concepts for a given cohort and time range — get_domain_concepts","title":"Retrieves domain concepts for a given cohort and time range — get_domain_concepts","text":"Retrieves domain concepts given cohort time range","code":""},{"path":"/reference/get_domain_concepts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieves domain concepts for a given cohort and time range — get_domain_concepts","text":"","code":"get_domain_concepts(   cohort,   concepts,   start_date,   end_date,   tbl_name,   date_column,   concept_id_column,   ... )"},{"path":"/reference/get_domain_concepts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieves domain concepts for a given cohort and time range — get_domain_concepts","text":"cohort data frame containing person IDs concepts vector concept IDs retrieve start_date start date time range retrieve concepts end_date end date time range retrieve concepts tbl_name name table containing domain concepts date_column name column containing concept dates concept_id_column name column containing concept IDs ... Additional arguments","code":""},{"path":"/reference/health_history_codebook.html","id":null,"dir":"Reference","previous_headings":"","what":"All of Us Health History Codebook — health_history_codebook","title":"All of Us Health History Codebook — health_history_codebook","text":"table consists rows codebook pertaining health history questions. early Us surveys, questions asked separately respondent respondent's family. current version, questions asked survey. nested nature questions makes challenging deal . can also accessed R using `allofus::aou_health_history`. Code generate table","code":""},{"path":"/reference/health_history_codebook.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"All of Us Health History Codebook — health_history_codebook","text":"","code":"aou_health_history"},{"path":"/reference/health_history_codebook.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"All of Us Health History Codebook — health_history_codebook","text":"`aou_health_history` data frame 1685  rows 9 columns: question chr; Question asked survey relative chr; Person answer pertains condition chr; Formatted text name concept category chr; Type health condition concept_code chr; Concept code AOU codebook concept_id_specific int; Concept id answer concept_id_overall int; Concept id condition overall concept_id_question int; Concept id overarching question form_name chr; Survey name","code":""},{"path":"/reference/omop_join.html","id":null,"dir":"Reference","previous_headings":"","what":"Join current query to another omop table — omop_join","title":"Join current query to another omop table — omop_join","text":"Simple wrapper join functions join existing query another table omop cdm (source).","code":""},{"path":"/reference/omop_join.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join current query to another omop table — omop_join","text":"","code":"omop_join(   data,   table,   type,   by,   suffix = c(\"_x\", \"_y\"),   con = getOption(\"aou.default.con\"),   x_as = NULL,   y_as = NULL,   ... )"},{"path":"/reference/omop_join.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join current query to another omop table — omop_join","text":"data sql query dbplyr/dplyr. table omop table (table schema) wish join type type join. use types available dplyr: left, right, inner, anti, full etc. con defaults connection set options() x_as optional; string name left table y_as optional; string name right table ... arguments passed join function. e.g., = \"person_id\"","code":""},{"path":"/reference/omop_join.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Join current query to another omop table — omop_join","text":"Continued dplyr query","code":""},{"path":"/reference/omop_join.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Join current query to another omop table — omop_join","text":"Include following line top script setting connection con refers connection object R. options(aou.default.con = con) good reasons use omop_join() possible x_join functions dplyr. First, reduces code necessary join existing table another table. Second, includes checks/workarounds two sources common errors using dplyr DatabaseConnector: automatically appends x_as y_as arguments join call provided changes default suffix .x/.y _x/_y cases shared column names specified argument result sql error.","code":""},{"path":"/reference/omop_join.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Join current query to another omop table — omop_join","text":"","code":"allofus::aou_connect() #> Error: Unable to connect #> <BigQueryConnection> #>   Dataset: NA.NA #>   Billing:  options(aou.default.con = con) #> Error in options(aou.default.con = con): object 'con' not found obs_tbl |>   omop_join(\"person\", type = \"left\", by = \"person_id\") #> Error in tbl(con, table): could not find function \"tbl\""},{"path":"/reference/on_workbench.html","id":null,"dir":"Reference","previous_headings":"","what":"Check to see whether you are on the All of Us workbench — on_workbench","title":"Check to see whether you are on the All of Us workbench — on_workbench","text":"Use function check whether Us Researcher Workbench. useful writing code can used workbench locally.","code":""},{"path":"/reference/on_workbench.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check to see whether you are on the All of Us workbench — on_workbench","text":"","code":"on_workbench()"},{"path":"/reference/on_workbench.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check to see whether you are on the All of Us workbench — on_workbench","text":"TRUE workbench, FALSE otherwise","code":""},{"path":"/reference/on_workbench.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check to see whether you are on the All of Us workbench — on_workbench","text":"","code":"on_workbench() #> [1] FALSE"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"/reference/pipe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipe operator — %>%","text":"","code":"1:10 %>% sum() #> [1] 55"},{"path":[]},{"path":"/news/index.html","id":"allofus-100","dir":"Changelog","previous_headings":"","what":"allofus 1.0.0","title":"allofus 1.0.0","text":"CRAN release: 2023-12-21 First CRAN release","code":""}]
